{
    
    // Forms
    "MENU_FORM": {
        "prefix": "MENU_FORM",
        "body": [
            "MENU_FORM ${form_name} &",                           
                "\t/COL=${col_num} & ",        
                "\t/HEIGHT=${height_num} & ",                        
                "\t/ROW=${row_num} & ",             
                "\t/WIDTH=${width_num}",
                "",            
                "\tITEM_BLOCK ${block_name1} /ROW=${item1_row_num} /COL=${item_col_num} /FACILITY=${facility_name1}",
                "",
                "\tITEM_BLOCK ${block_name2} /ROW=${item2_row_num} /COL=${item_col_num} /FACILITY=${facility_name2}",            
                "",
            "END_FORM "
            
        ],
        "description": "Menu Form"
    },
    
        "MENU_FORM ALL": {
        "prefix": "MENU_FORM ALL QUALIFIERS",
        "body": [
            "MENU_FORM ${form_name} &",            
                "\t/ATTRIBUTES=${attributes} & ! BLINK, BOLD, NOBORDER, REVERSE, UNDERLINE",
                "\t/COL=${col_num} & ",
                "\t/DEFAULT_TAG=${menu_item} & ",
                "\t/HEIGHT=${height_num} & ",            
                "\t/READ_ONLY & ",
                "\t/ROW=${row_num} & ",
                "\t/SYSTEM=${database}.${system} & ",
                "\t/TAG_LENGTH=${tag_length} &",
                "\t/TITLE=\"${title}\" & ",
                "\t/WIDTH=${width_num}",
                "",            
                "\tITEM_BLOCK ${block_name1} /ROW=${item1_row_num} /COL=${item_col_num} /FACILITY=${facility_name1}",
                "",
                "\tITEM_BLOCK ${block_name2} /ROW=${item2_row_num} /COL=${item_col_num} /FACILITY=${facility_name2}",            
                "",
            "END_FORM "
            
        ],
        "description": "Menu Form with all Qualifiers"
    },

    "NORMAL_FORM": {
        "prefix": "FORM",
        "body": [
            "FORM ${form_name} &",                          
                "\t/COL=${col_num} &",              
                "\t/HEIGHT=${height_num} &",             
                "\t/WIDTH=${width} &",
                "\t/TITLE=\"${title}\"",
                "\t",
            "END_FORM"
            
        ],
        "description": " Normal Form"
    },

    "NORMAL_FORM ALL": {
        "prefix": "FORM ALL QUALIFIERS",
        "body": [
            "FORM ${form_name} &",            
                "\t/ATTRIBUTES=${attributes} & ! BLINK, BOLD, NOBORDER, REVERSE, UNDERLINE",
                "\t/BASE &",
                "\t/BREAK=${start_form},${end_form},${expression} & ",
                "\t/BREAK0=${pre_form},${post_form} &",
                "\t/COL=${col_num} &",
                "\t/FIRST=${max_records} &",
                "\t/GROUPED_BY=${grouped_by} &",
                "\t/HEIGHT=${height_num} &",
                "\t/JOINED_TO=${joined_to_table} &",
                "\t/LOCK=${lock_type} & ! NONE, READ, WRITE",
                "\t/NOEXIT_FORWARD &",
                "\t/READ_ONLY &",
                "\t/REDUCED_TO=${reduced_to} &", 
                "\t/REMAIN &",
                "\t/REPEAT[=NOCLEAN]  & ! repeat repeatedly",
                "\t/ROW=row_num &",
                "\t/SECONDARY &",
                "\t/SELECTION=${selection} &",
                "\t/SORTED_BY=(${sorted_by}) &",
                "\t/STATISTIC=${var}=${statistic_function} &",
                "\t/STREAM_NAME=${stream_name} &",
                "\t/TABLE=${table} &",
                "\t/TITLE=\"${title}\" &",
                "\t/WIDTH=${width} &",
                "\t/WITH=${with_field_expression}",
                "\t",
            "END_FORM"
            
        ],
        "description": "Normal Form with all Qualifiers"
    },


    "PROCEDURE_FORM": {
        "prefix": "PROCEDURE_FORM",
        "body": [
            "PROCEDURE_FORM ${form_name}",
                "\t",
            "END_FORM"            
        ],
        "description": "Procedure Form"
    },

    
    "PROCEDURE_FORM ALL": {
        "prefix": "PROCEDURE_FORM ALL QUALIFIERS",
        "body": [
            "PROCEDURE_FORM ${form_name} ${[arguments]} &",            
                "\t/BASE &",
                "\t/BREAK=${start_form},${end_form},${expression} & ",                           
                "\t/BREAK0=${pre_form},${post_form} &",
                "\t/COMMIT_RATE=${commit_rate} &",
                "\t/FIRST=${max_records} &",
                "\t/GROUPED_BY=${grouped_by} &",
                "\t/JOINED_TO=${joined_to_table} &",
                "\t/LOCK=${lock_type} & ! NONE, READ, WRITE",               
                "\t/NOEXIT_FORWARD &",
                "\t/READ_ONLY &",
                "\t/REDUCED_TO=${reduced_to} &",
                "\t/SECONDARY &",                
                "\t/SELECTION=${selection} &",
                "\t/SORTED_BY=(${sorted_by}) &",
                "\t/STATISTIC=${var}=${statistic_function} &",
                "\t/STREAM_NAME=${stream_name} &",               
                "\t/STATUS &",
                "\t/STREAM_NAME=${stream_name} &",
                "\t/TABLE=${table} &",
                "\t/WITH=${with_field_expression}",
                "\t",
            "END_FORM"            
        ],
        "description": "Procedure Form with all Qualifiers"
    },
    
    "QUERY_FORM": {
        "prefix": "QUERY_FORM",
        "body": [
            "QUERY_FORM ${form_name} &",                         
                "\t/COL=${col_num} &",         
                "\t/HEIGHT=${height_num} &",      
                "\t/ROW=row_num &",          
                "\t/WIDTH=${width} &",
                "\t/TABLE=${table}",
                "\t",
            "END_FORM"            
        ],
        "description": "Query Form"
    },    
    
    
    "QUERY_FORM_ALL": {
        "prefix": "QUERY_FORM ALL QUALIFIERS",
        "body": [
            "QUERY_FORM ${form_name} ${[arguments]} &",                         
                "\t/ADD_FORM=${add_form_name} &",
                "\t/ATTRIBUTES=${attributes} & ! BLINK, BOLD, NOBORDER, REVERSE, UNDERLINE",
                "\t/BASE &",            
                "\t/COL=${col_num} &",
                "\t/DELETE_FORM=${delete_form} &",
                "\t/FIND_FORM=${find_form} &",
                "\t/FIRST=${max_records} &",                
                "\t/HEIGHT=${height_num} &",
                "\t/JOINED_TO=${joined_to_table} &",
                "\t/LOCK=${lock_type} & ! NONE, READ, WRITE",
                "\t/MODIFY_FORM=${modify_form} &",
                "\t/NOEXIT_FORWARD &",
                "\t/OPTIONS=${options} & ! EXECUTE, EXIT_EMPTY, NODELETE, NOFIND, NOINSERT, NOMODIFY, START_INSERT" ,
                "\t/READ_ONLY &",
                "\t/REDUCED_TO=${reduced_to} &", 
                "\t/REMAIN &",
                "\t/REPEAT[=NOCLEAN]  & ! repeat repeatedly",
                "\t/ROW=row_num &",
                "\t/SELECTION=${selection} &",
                "\t/SORTED_BY=(${sorted_by}) &",
                "\t/TABLE=${table} &",
                "\t/TITLE=\"${title}\" &",
                "\t/WIDTH=${width} &",
                "\t/WITH=${with_field_expression}",
                "\t",
            "END_FORM"
        ],
        "description": "Query Form with all Qualifiers"
    },    
    
    "REPORT_FORM": {
        "prefix": "REPORT_FORM",
        "body": [
            "REPORT_FORM ${form_name} &",
                "\t/TABLE=${table}",
                "\t",
                "\tOUTPUT_BLOCK ${block_name} /ROW=${output_row_num} /COL=${output_col_num} &",
                "\t\t/SOURCE=${source}",
                "\t",
            "END_FORM"
        ],
        "description": "Report Form"
    },  
    
        "REPORT_FORM ALL": {
        "prefix": "REPORT_FORM ALL QUALIFIERS",
        "body": [
            "REPORT_FORM ${form_name} &",              
                "\t/BASE &",
                "\t/BEGIN_ROW=${begin_row_num} &",
                "\t/BREAK=${start_form},${end_form},${expression} &",                           
                "\t/BREAK0=${pre_form},${post_form} &",
                "\t/COLUMN_HEADINGS=${col_heading_form} &",
                "\t/COLUMN_SPACING=${col_spacing_num} &",
                "\t/END_ROW=${end_row_num} &",
                "\t/FIND_FORM=${find_form} &",
                "\t/FIRST=${max_records} &",
                "\t/FOOTING=${footing} &",
                "\t/FOOTING_FORM=${footing_form} &",               
                "\t/GROUPED_BY=${grouped_by} &",
                "\t/HEADING=${heading} &",
                "\t/HEADING_FORM=${heading_form} &",
                "\t/HEIGHT=${height_num} &",
                "\t/JOINED_TO=${joined_to_table} &",
                "\t/LFOOTING=${lfooting} &",
                "\t/LHEADING=${lheading} &",
                "\t/LINES_AFTER=${lines_after} & ! number or \"TOP_OF_PAGE\"", 
                "\t/LINES_BEFORE=${lines_before} & ! number or \"TOP_OF_PAGE\"",
                "\t/LOCK=${lock_type} & ! NONE, READ, WRITE",
                "\t/NOSTATUS &",
                "\t/OPTIONS=${options} & ! COMPLETE, CONTINUE, INFINITE, MERGED, NOUNDERLINES, OVERLAID, PAGE_BREAK_REPRINT, PRINT, SUMMARY, ZEROSUPPRESS",
                "\t/OUTPUT=${output} &",
                "\t/PDF(${pdf_options}=${value}) &",
                "\t/READ_ONLY &",
                "\t/REDUCED_TO=\"${reduced_to}\" &",
                "\t/RFOOTING=${rfooting} &",
                "\t/RHEADING=${rheading} &",
                "\t/SECONDARY &",
                "\t/SELECTION=${selection} &",
                "\t/SORTED_BY=${sorted_by} &",
                "\t/STATISTIC=${variable}=${statistic_function} &",
                "\t/STATUS &",
                "\t/STREAM_NAME=${stream} &",
                "\t/TABLE=${table} &",
                "\t/WIDTH=${width} &",
                "\t/WITH=${with} &",
                "",
            "END_FORM"
        ],
        "description": "Report Form with all Qualifiers"
    },  
    
   "TABLE_FORM": {
        "prefix": "TABLE_FORM",
        "body": [
            "TABLE_FORM ${form_name} &",
                "\t/TABLE=${table} &",
                "\t/ROW=${row_num} &",                
                "\t/COL=${col_num} &",
                "\t/HEIGHT=${height_num} &",
                "\t/WIDTH=${width}",
                "\t",
            "END_FORM"
        ],
        "description": "Generate Table Form"
    },  


   "TABLE_FORM ALL": {
        "prefix": "TABLE_FORM ALL QUALIFIERS",
        "body": [
            "TABLE_FORM ${form_name} &",
                "\t/ALTERNATE_FORM=${alt_form} &",
                "\t/ATTRIBUTES=${attributes} & ! BLINK, BOLD, NOBORDER, REVERSE, UNDERLINE",
                "\t/BASE &",
                "\t/BEGIN_ROW=${begin_row_num} &",
                "\t/COL=${col_num} &",
                "\t/COLUMN_HEADING_ROW=${col_heading_row_num} &",
                "\t/DELETE_FORM=${delete_form} &",
                "\t/END_ROW=${end_row_num} &",
                "\t/FIND_FORM=${find_form} &",
                "\t/FIRST=${max_records} &",
                "\t/HEIGHT=${height_num} &",
                "\t/INPUT_ROW_HEIGHT=${input_row_height} &",
                "\t/JOINED_TO=${joined_to} &",
                "\t/LOCK=${lock_type} & ! NONE, READ, WRITE &",
                "\t/NOERROR &",
                "\t/NOEXIT_FORWARD &",
                "\t/OPTIONS=${options} & ! DISPLAY_RO, EXIT_EMPTY, FAST_INSERT, INSERT_FIRST, INSERT_END, MENU, NODELETE, NOEDIT, tNOINSERT, NOMODIFY, POSITION_AT_END, SELECT_ALL, SELECT_ONE, START_FIND",              
                "\t/READ_ONLY &",
                "\t/REDUCED_TO=${reduced_to} &",
                "\t/REMAIN &",
                "\t/ROW=${row_num} &",
                "\t/ROW_HEIGHT=${row_height} &",
                "\t/SECONDARY &",
                "\t/SELECTION=${selection} &",
                "\t/SEQUENCE=${seq_field_name} &",
                "\t/SEQUENCE_INCREMENT=${seq_increment} &",
                "\t/SORTED_BY=${sorted_by} &",
                "\t/TABLE=${table} &",
                "\t/TITLE=\"${title}\" &",
                "\t/WIDTH=${width_num} &",
                "\t/WITH=${with}",
                "\t",
            "END_FORM"
        ],
        "description": "Generate Table Form with ALL Qualifiers"
    },  
            
    // Declarations
        
    "TITLE facility_name, \"title_text\"": {
        "prefix": "TITLE",
        "body": [
            "TITLE ${facility_name}, \"${title_text}\""
        ]
    },
    
    
    // Blocks
    "BEGIN_BLOCK": {
        "prefix": "BEGIN_BLOCK (Generate)",
        "body": [
            "BEGIN_BLOCK ${block_name}",
                "\t",
            "END_BLOCK"
        ],
        "description": "Generate Begin Block"
    },
    "BEGIN_BLOCK DISPLAY_ONLY": {
        "prefix": "BEGIN_BLOCK /DISPLAY_ONLY (Generate)",
        "body": [
            "BEGIN_BLOCK /DISPLAY_ONLY ${block_name}",
                "\t",
            "END_BLOCK"
        ],
        "description": "Generate Begin Block with /DISPLAY_ONLY"
    },
    "INPUT_BLOCK": {
        "prefix": "INPUT_BLOCK (Generate)",
        "body": [
            "INPUT_BLOCK ${block_name} &",
                "\t/ROW=${row_num} &",
                "\t/COL=${col_num} &",
                "\t/TARGET=${target}",
                "\t"
        ],
        "description": "Generate Input Block"        
    },    
    "INPUT_BLOCK ALL": {
        "prefix": "INPUT_BLOCK (Generate ALL Qualifiers)",
        "body": [
            "INPUT_BLOCK ${block_name} &",
                "\t/ABSOLUTE_POSITION &",
                "\t/ATTRIBUTES=${attributes} & ! BLINK, BOLD, FORCE, NONE, REVERSE, UNDERLINE",
                "\t/BACK=(${back_dml}) &",
                "\t/COL=${col} & ! CENTER, LEFT, RIGHT",
                "\t/DISPLAY_LENGTH=${display_number} &",
                "\t/DOMAIN=${domain_table} &",
                "\t/EXIT=(${exit_dml}) &",
                "\t/EXIT_FORWARD=(${exit_forward}) &",
                "\t/HEADING=${heading} &",
                "\t/HEIGHT=${height_num} &",
                "\t/INPUT_MASK=${input_mask} &",
                "\t/LEN=${len_num} &",
                "\t/LOV=${lov_table}(${lov_fields}) &",
                "\t/LOV_AUTO_SELECT &",
                "\t/LOV_COL=${lov_col} &",
                "\t/LOV_DATA=${lov_data_field} &",
                "\t/LOV_FIRST=${lov_first} &",
                "\t/LOV_HEIGHT=${lov_height} &",
                "\t/LOV_NOHEADING &",
                "\t/LOV_NOSEARCH &",
                "\t/LOV_REDUCED_TO=${lov_reduced_to} &",
                "\t/LOV_ROW=${lov_row_num} &",
                "\t/LOV_SECONDARY &",
                "\t/LOV_SELECTION=${lov_selection} &",
                "\t/LOV_SORTED_BY=${lov_sorted_by} &",
                "\t/LOV_WIDTH=${lov_width} &",
                "\t/LOV_WITH=${lov_with} &",
                "\t/NEW &",
                "\t/NOCLEAR_BUFFER &",
                "\t/NO_DOMAIN &",
                "\t/NOLOV_DATA &",
                "\t/NOUNDERLINES &",
                "\t/OPTIONS=${options} & ! DOCUMENTARY_AT_END, DOMAIN_LOCK_NONE, DOMAIN_LOCK_WRITE, DOCUMENTARY_RO, NOLOV_ALLOWED",
                "\t/PROMPT=${prompt} &",
                "\t/PROTECT &",
                "\t/ROW=${row_num} &",
                "\t/SOURCE=${source} &",
                "\t/SOURCE_IF=(${source_if_condition}), ${source_if_default} &",
                "\t/TARGET=${target} &",
                "\t/TITLE=\"${title}\" &",
                "\t/USE_IF=(${use_if_condition}) &",
                "\t/USER_KEY n=(${user_key}) &",
                "\t/USING=${using_keywords}",
                "\t"
            
        ],
        "description": "Generate Input Block with ALL Qualifiers"        
    },    
    
     "ITEM_BLOCK": {
        "prefix": "ITEM_BLOCK (Generate)",
        "body": [
            "ITEM_BLOCK ${block_name} &",
                "\t/ROW=${row_num} &",
                "\t/COL=${col_num} &",
                "\t/FACILITY=${facility}",
                "\t"
        ],
        "description": "Generate Item Block"        
    },    
    
    "ITEM_BLOCK ALL": {
        "prefix": "ITEM_BLOCK (Generate ALL Qualifiers)",
        "body": [
            "ITEM_BLOCK ${block_name} &",
                "\t/ATTRIBUTES=${attributes} & ! BLINK, BOLD, FORCE, NONE, REVERSE, UNDERLINE",
                "\t/COL=${col} &",
                "\t/FACILITY=${facility} &",
                "\t/PROMPT=${prompt} &",
                "\t/ROW=${row_num} &",
                "\t/SOURCE=${source} &",
                "\t/TAG=${tag} &",
                "\t/TAG_LENGTH=$tag_length} &",
                "\t/USE_IF=(${use_if_condition}) &",
                "\t"
        ],
        "description": "Generate Item Block with ALL Qualifiers"        
    },    
    
    "MENU_BLOCK": {
        "prefix": "MENU_BLOCK (Generate)",
        "body": [
            "MENU_BLOCK ${block_name} &",
                "\t/ROW=${row_num} &",
                "\t/COL=${col_num} &",
                "\t/FACILITY=${facility}",
                "\t"
        ],
        "description": "Generate Menu Block"        
    },    
    "MENU_BLOCK ALL": {
        "prefix": "MENU_BLOCK (Generate ALL Qualifiers)",
        "body": [
            "MENU_BLOCK ${block_name} &",
                "\t/BACK=(${back_dml}) &",
                "\t/COL=${col} &",
                "\t/EXIT=(${exit_dml}) &",
                "\t/EXIT_FORWARD=(${exit_forward_dml}) &",
                "\t/HEIGHT=${height_num} &",
                "\t/ITEM=${item} &",
                "\t/ITEM_IF=${item_if} &",
                "\t/NOREPEAT &",             
                "\t/ROW=${row_num} &",
                "\t/SOURCE=${source} &",
                "\t/SOURCE_IF=${source_if} &",
                "\t/TARGET=${target} &",
                "\t/TITLE=\"${title}\" &",
                "\t/USE_IF=(${use_if_condition})",
                "\t"
        ],
        "description": "Generate Menu Block with ALL Qualifiers"        
    },    
    "OUTPUT_BLOCK": {
        "prefix": "OUTPUT_BLOCK (Generate)",
        "body": [
            "OUTPUT_BLOCK ${block_name} &",
                "\t/ROW=numeric_expression &",
                "\t/COL=numeric_expression &",
                "\t/SOURCE=${source}",
                "\t"
        ],
        "description": "Generate Output Block"        
    },    
    "OUTPUT_BLOCK ALL": {
        "prefix": "OUTPUT_BLOCK (Generate ALL Qualifiers)",
        "body": [
            "OUTPUT_BLOCK ${block_name} &",
                "\t/ABSOLUTE_POSITION &",
                "\t/ATTRIBUTES=${attributes} & ! BLINK, BOLD, FORCE, NONE, REVERSE, UNDERLINE",
                "\t/BREAK=${break_int} &",
                "\t/COL=${col} &",
                "\t/DOMAIN=${domain_table} &",
                "\t/HEADING=${heading} &",
                "\t/HEIGHT=${height_num} &",
                "\t/LEN=${len} &",
                "\t/NOHEADING &",
                "\t/NOUNDERLINES &",
                "\t/OUTPUT_MASK=${output_mask} &",
                "\t/PDF(${pdf_options}=${value}) &",
                "\t/PROMPT=${prompt} &",
                "\t/ROW=${row}",
                "\t/SOURCE=${source} &",
                "\t/SOURCE_IF=${source_if} &",
                "\t/TARGET=${target} &",
                "\t/TOTAL &",
                "\t/USE_IF=(${use_if_condition}) &",
                "\t/USING=${usings}",
                "\t",
                "\t",
                ""
                    ],
        "description": "Generate Pause Block"        
    },    
    "PAUSE_BLOCK": {
        "prefix": "PAUSE_BLOCK (Generate)",
        "body": [
            "PAUSE_BLOCK ${block_name}",              
                "\t",
            ""
                
        ],
        "description": "Generate Pause Block"        
    },  
    "PAUSE_BLOCK ALL": {
        "prefix": "PAUSE_BLOCK (Generate ALL Qualifiers)",
        "body": [
            "PAUSE_BLOCK ${block_name} &",              
                "\t/BACK=(${back_dml}) &",
                "\t/COL=${col_num} &",
                "\t/EXIT=(${exit_dml}) &",
                "\t/EXIT_FORWARD=(${exit_forward_dml}) &",
                "\t/PROMPT=${prompt} &",
                "\t/ROW=${row_num} &",
                "\t/USE_IF=(${use_if_condition})",
            "",    
            ""
                
        ],
        "description": "Generate Pause Block with ALL Qualifiers"        
    },  
    "SIGNATURE_BLOCK": {
        "prefix": "SIGNATURE_BLOCK (Generate)",
        "body": [
            "SIGNATURE_BLOCK",              
                "\t",
            ""
                
        ],
        "description": "Generate Signature Block"        
    },      
    "SIGNATURE_BLOCK ALL": {
        "prefix": "SIGNATURE_BLOCK (Generate with ALL Qualifiers)",
        "body": [
            "SIGNATURE_BLOCK &",              
                "\t/AUDIT=${audit_file_spec} &",
                "\t/DATETIME=${datetime} &",
                "\t/FACILITY=${facility} &",
                "\t/FAILURE=(${failure}) &",
                "\t/NOAUDIT &",
                "\t/PASSWORD1=${password1} &",
                "\t/PASSWORD2=${password2} &",
                "\t/PURPOSE=${purpose} &",
                "\t/SUCCESS=(${success_dml}) &",
                "\t/USERNAME1=${username1} &",
                "\t/USERNAME2=${username2} &",
                "\t/USER1=${user_defined1} &",
                "\t/USER2=${user_defined2} &",
                "\t/USER3=${user_defined3} &",
                "\t/USER4=${user_defined4} &",
                "\t/USER5=${user_defined5} &",
                "\t/VALIDATION_FORM=${validation_form} &",
                "\t",
                ""                            
        ],
        "description": "Generate YesNo Block with ALL Qualifiers"        
    },
    "YESNO_BLOCK": {
        "prefix": "YESNO_BLOCK (Generate)",
        "body": [
            "YESNO_BLOCK ${block_name} /ROW=${row_num} /COL=${col}",                               
                "\t",
                "\t",
            ""
                
        ],
        "description": "Generate YESNO Block"        
    },       
    "YESNO_BLOCK ALL": {
        "prefix": "YESNO_BLOCK (Generate ALL Qualifiers)",
        "body": [
            "YESNO_BLOCK ${block_name} &",   
                "\t/BACK=(dml_statement) &",
                "\t/COL=${col} &",
                "\t/EXIT=(${exit_dml}) &",
                "\t/EXIT_FORWARD=(${exit_forward_dml}) &",
                "\t/FAILURE=(${failure}) &",
                "\t/HEADING=${heading} &",
                "\t/NOUNDERLINES &",
                "\t/PROMPT=${prompt} &",
                "\t/ROW=${row_num} &",
                "\t/SOURCE=${source} &",
                "\t/SOURCE_IF=${source_if} &",
                "\t/SUCCESS=(${success_dml}) &",
                "\t/TARGET=${target} &",
                "\t/USE_IF=(${use_if_condition})",                            
                "\t",
                "\t",
            ""
                
        ],
        "description": "Generate YESNO Block with ALL Qualifiers"        
    },       
    
        
    
    // Statements    
    
    "ADD_TO": {
        "prefix": "ADD_TO",
        "body": [
            "ADD_TO ${table_or_variable} "
                
        ],
        "description": "ADD_TO table or variable"        
    },
    "ARCHIVE": {
        "prefix": "ARCHIVE[DBMS] [{from/source}]",
        "body": [
            "ARCHIVE[${DBMS}] [${from_source}] ${from_db_handle} [${to_target}] ${to_db_handle}"
                
        ],
        "description": "ARCHIVE [DBMS]"        
    },
    "BEGIN_CASE": {
        "prefix": "BEGIN_CASE / END_CASE",
        "body": [
            "BEGIN_CASE ($expression)\t",
            "\t",
            "END_CASE"
                
        ],
        "description": "BEGIN_CASE"        
    },           

    "BEGIN_CASE_GEN": {
        "prefix": "BEGIN_CASE / CASE / CASE_ELSE / END_CASE (Generate)",
        "body": [
            "BEGIN_CASE (${begin_case_expression})\t",
            "\t",
            "\tCASE ${operator} ${case_expression}",
            "\t",
            "\tCASE ${expression_a} TO ${expression_b}",
            "\t",
            "\tCASE ELSE",
            "END_CASE"
                
        ],
        "description": "Generate BEGIN_CASE / END_CASE block with CASE statements"        
    },           
    "BEGIN_DISABLE_TRIGGER": {
        "prefix": "BEGIN_DISABLE_TRIGGER",
        "body": [
            "BEGIN_DISABLE_TRIGGER"
                
        ],
        "description": "Disable update triggers"        
    },
    "BEGIN_SIGNAL_TO_STATUS": {
        "prefix": "BEGIN_SIGNAL_TO_STATUS",
        "body": [
            "BEGIN_SIGNAL_TO_STATUS"
                
        ],
        "description": "Trap Error Signals"        
    },
    "CALL": {
        "prefix": "CALL routine_name [arguments]",
        "body": [
            "CALL ${routine_name} ${arguments}"
                
        ],
        "description": "Call Routine"        
    },
    "CALL_WEB_SERVICE": {
        "prefix": "CALL_WEB_SERVICE /ACTION=action /OPERATION=operation /PARAMETER=parameter /NAMESPACE=namespace /URL=url /RESPONSE=response /RESULT=result",
        "body": [
            "CALL_WEB_SERVICE &",
                "\t/ACTION=${action} &",
                "\t/OPERATION=${operation} &",
                "\t/PARAMETER=(NAME=${name}, TYPE=${type}, SOURCE=${source}, TARGET=${target}) &",
                "\t/NAMESPACE=${namespace} &",
                "\t/URL=${url} &",
                "\t/RESPONSE=${response} &",
                "\t/RESULT=(NAME=${r_name}, TYPE=${r_type}, TARGET=${r_target})"
                
        ],
        "description": "Call SOAP XML Web Service"        
    },
    "CD": {
        "prefix": "CD directory",
        "body": [
            "CD ${directory}"
                
        ],
        "description": "Set User Working Directory"        
    },
    "CHECK_DOMAIN_TARGET": {
        "prefix": "CHECK_DOMAIN [label_name] /TARGET=table_name(field_name) [/qualifiers]",
        "body": [
            "CHECK_DOMAIN ${label_name} /TARGET=${table}(${field}) &",
                "\t/DOMAIN=${domain_table} &",
                "\t/ERROR=${expression} &",
                "\t/FAILURE=(${failure_dml}) &",
                "\t/NEW &",
                "\t/NOCLEAR_BUFFER &",
                "\t/NOERROR &",
                "\t/OPTION=${options} & ! DOMAIN_LOCK_WRITE, DOMAIN_LOCK_NONE",
                "\t/PROTECT &",
                "\t/SOURCE=${source} &",
                "\t/SOURCE_IF=${source_if} &",
                "\t/SUCCESS=(${success_dml})",
                ""
                
        ],
        "description": "Domain Validation with TARGET"        
    },
   "CHECK_DOMAIN_USING": {
        "prefix": "CHECK_DOMAIN [label_name] /USING=table_name(field_name) [/qualifiers]",
        "body": [
            "CHECK_DOMAIN ${label_name} /TARGET=${table}(${field}) &",
                "\t/DOMAIN=${domain_table} &",
                "\t/ERROR=${expression} &",
                "\t/FAILURE=(${failure_dml}) &",
                "\t/NEW &",
                "\t/NOCLEAR_BUFFER &",
                "\t/NOERROR &",
                "\t/OPTION=${options} & ! DOMAIN_LOCK_WRITE, DOMAIN_LOCK_NONE",
                "\t/PROTECT &",
                "\t/SOURCE=${source} &",
                "\t/SOURCE_IF=${source_if} &",
                "\t/SUCCESS=(${success_dml})",
                ""
                
        ],
        "description": "Domain Validation with USING"        
    },
    "CLEAR_ARRAY": {
        "prefix": "CLEAR_ARRAY #array()",
        "body": [
            "CLEAR_ARRAY ${#array()}"
                
        ],
        "description": "Clears Array"        
    },
    "CLEAR_BUFFER_TABLE": {
        "prefix": "CLEAR_BUFFER table",
        "body": [
            "CLEAR_BUFFER ${table}"
                
        ],
        "description": "Clears Buffer (non-PID fields)"        
    },
    "CLEAR_BUFFER_DB_TABLE": {
        "prefix": "CLEAR_BUFFER database_handle.table",
        "body": [
            "CLEAR_BUFFER ${database_handle}.${table}"
                
        ],
        "description": "Clears Buffer (non-PID fields)"        
    },
    "CLEAR_BUFFER_VAR": {
        "prefix": "CLEAR_BUFFER database_handle.table",
        "body": [
            "CLEAR_BUFFER ${variable}"
                
        ],
        "description": "Clears Buffer (non-PID fields)"        
    },
    "CLI": {
        "prefix": "CLI command_expression",
        "body": [
            "CLI ${expression}"
                
        ],
        "description": "Command Language Interpreter"        
    },
   "CLI_ALL": {
        "prefix": "CLI command_expression /NOERASE /PAUSE",
        
        "body": [
            "CLI ${expression} /NOERASE /PAUSE"
                
        ],
        "description": "Command Language Interpreter"        
    },
   "CLOSE_TABS": {
        "prefix": "CLOSE_TABS",
        
        "body": [
            "CLOSE_TABS"
                
        ],
        "description": "Close Tabs and kill gem_ui_server processes"        
    },
   "CLOSE_TABS_ALL": {
        "prefix": "CLOSE_TABS /GEMBASE_ONLY /HTML_ONLY",
        
        "body": [
            "CLOSE_TABS /GEMBASE_ONLY /HTML_ONLY"
                
        ],
        "description": "Close Tabs and kill gem_ui_server processes"        
    },
    "CLOSE_TEXT": {
        "prefix": "CLOSE_TEXT tag",
        
        "body": [
            "CLOSE_TEXT ${tag}"
                
        ],
        "description": "Close text file previously opened with OPEN_TEXT"        
    },
    "COMMIT": {
        "prefix": "COMMIT",
        
        "body": [
            "COMMIT"
                
        ],
        "description": "Commit to database"        
    },
    "COMPILE": {
        "prefix": "COMPILE [/qualifiers] \"input_file_spec\" [\"output_file_spec\"]",
        
        "body": [
            "COMPILE /CHECK /LIST /LOG=${log_file_name} \"${input_file_spec}\" \"${output_file_spec}\""
                
        ],
        "description": "Compile DML file"        
    },
    "CONTINUE": {
        "prefix": "CONTINUE",
        
        "body": [
            "COMPILE"
                
        ],
        "description": "Transfers program control to the end of the inner-most loop, continuing the loop."        
    },
    "CONTINUE_KEYWORD": {
        "prefix": "CONTINUE [keyword]",
        
        "body": [
            "COMPILE ${keyword} ! COMMIT, OUT, ROLLBAK"
                
        ],
        "description": "Transfers program control to the end of the inner-most loop, continuing the loop."        
    },
    "DELETE FROM": {
        "prefix": "DELETE FROM [database_handle.]table_name",
        
        "body": [
            "DELETE FROM ${dataase}.${table} ! /ARCHIVE"
                
        ],
        "description": "Delete buffer"        
    },
   "DELETE ALL FROM": {
        "prefix": "DELETE ALL FROM [database_handle.]table_name",
        
        "body": [
            "DELETE ALL FROM ${dataase}.${table} ! /ARCHIVE"             
        ],
        "description": "Transfers program control to the end of the inner-most loop, continuing the loop."        
    },
    "DELETE FROM VAR": {
        "prefix": "DELETE FROM #variable",
        
        "body": [
            "DELETE FROM ${variable} ! /ARCHIVE"
                
        ],
        "description": "Delete buffer"        
    },
   "DELETE ALL FROM VAR": {
        "prefix": "DELETE ALL FROM #variable",
        
        "body": [
            "DELETE ALL FROM ${variable} ! /ARCHIVE"             
        ],
        "description": "Transfers program control to the end of the inner-most loop, continuing the loop."        
    },
   "DIR": {
        "prefix": "DIR file_spec",
        
        "body": [
            "DIR ${file_spec}"             
        ],
        "description": "List files in a directory in TABLE_EDIT form"        
    },
   "DISPLAY": {
        "prefix": "DISPLAY keyword",
        
        "body": [
            "DISPLAY ${keyword} ! CLEAN, DEFAULTS, BEGIN_UPDATE, END_UPDATE, FLUSH, REFRESH"             
        ],
        "description": "Redisplay form"        
    },
   "END_DISABLE_TRIGGER": {
        "prefix": "END_DISABLE_TRIGGER",
        
        "body": [
            "END_DISABLE_TRIGGER"             
        ],
        "description": "Re-enable updates following BEGIN_DISABLE_TRIGGER"        
    },
   "END_EXECUTE": {
        "prefix": "END_EXECUTE [/CONNECT=connect_handle]",
        
        "body": [
            "END_EXECUTE /CONNECT=${handle}"             
        ],
        "description": "Abort stored procedure"        
    },
   "END_GTID": {
        "prefix": "END_GTID",
        
        "body": [
            "END_GTID"             
        ],
        "description": "Decrements %GTID_LEVEL"        
    },
   "END_SIGNAL_TO_STATUS": {
        "prefix": "END_SIGNAL_TO_STATUS",
        
        "body": [
            "END_SIGNAL_TO_STATUS"             
        ],
        "description": "Stop trapping error signals"        
    },
   "END_WHILE": {
        "prefix": "END_WHILE",
        
        "body": [
            "END_WHILE"             
        ],
        "description": "End While Loop"        
    },
   "ERROR": {
        "prefix": "ERROR error_text",
        
        "body": [
            "ERROR ${error_text}"             
        ],
        "description": "Error Text"        
    },
   "ERROR_ALL": {
        "prefix": "ERROR [/qualifiers] error_text",
        
        "body": [
            "ERROR /BELL /CONFIRM /NOBELL /NOWAIT /TEXT_ONLY /WAIT ${error_text}"             
        ],
        "description": "Error Text with all qualifiers"        
    },
   "EXECUTE": {
        "prefix": "EXECUTE procedure_name",
        
        "body": [
            "EXECUTE ${procedure_name}"             
        ],
        "description": "Execute Procedure"        
    },
   "EXECUTE_ALL": {
        "prefix": "EXECUTE [/HANDLE=connect_handle] [/NOWAIT] procedure_name [(arguments)]",
        
        "body": [
            "EXECUTE /HANDLE=${handle} /NOWAIT ${procedure_name} ${(arguments)}"             
        ],
        "description": "Execute Procedure with Arguments and ALL Qualifiers"        
    },
   "EXIT": {
        "prefix": "EXIT",
        
        "body": [
            "EXIT"             
        ],
        "description": "Exit Current Form"        
    },
   "EXIT_status_success": {
        "prefix": "EXIT (%SUCCESS)",
        
        "body": [
            "EXIT (%SUCCESS)"             
        ],
        "description": "Exit Current Form with Success Status"        
    },
   "EXIT_status": {
        "prefix": "EXIT (%FAILURE)",
        
        "body": [
            "EXIT ($FAILURE)"             
        ],
        "description": "Exit Current Form Failure Status"        
    },
   "EXPORT": {
        "prefix": "EXPORT",
        
        "body": [
            "EXPORT"             
        ],
        "description": "EXPORT"        
    },
   "EXPORT_ALL": {
        "prefix": "EXPORT [Generate Qualifiers)",
        
        "body": [
            "EXPORT &",
                "\t/ARCHIVE=${archive_file_spec} &",
                "\t/ASCII &",
                "\t/BINARY &",
                "\t/CHARACTER_SET=${character_set} &",
                "\t/COMMIT_RATE=${commit_rate} &",
                "\t/CSV &",
                "\t/DATA &",
                "\t/FAILURE=(${failure_dml}) &",
                "\t/FROM=${from_db_handle} &",
                "\t/LOG=${log_file_spec} &",
                "\t/METADATA=${metadata_list} &",
                "\t/NOAUDIT &",
                "\t/NODATA &",
                "\t/NOLOG &",
                "\t/NOMETADATA &",
                "\t/NOSIGN &",
                "\t/NOSTATUS &",
                "\t/SIGN &",
                "\t/STATUS &",
                "\t/SUCCESS=(${success-dml}) &",
                "\t/TABLES=${tables} &",
                "\t/TO=${to_db_handle}",
                ""
                 
        ],
        "description": "Generate EXPORT with all Qualifers"        
    },
   "EXPORT_CSV": {
        "prefix": "EXPORT/CSV [Generate Qualifiers)",
        
        "body": [
            "EXPORT/CSV &",           
                "\t/ALWAYS_QUOTE &",
                "\t/CHARACTER_SET=${character_set} &",
                "\t/DOUBLE_QUOTE &",
                "\t/ESCAPE_CHARACTER=${escape_char} &",
                "\t/FAILURE=(${failure_dml}) &",
                "\t/FIELD_SEPARATOR=${field_separator} &",
                "\t/FIELDS=${field_list} &",
                "\t/FROM=${db_handle}.${table} &",
                "\t/LOG=${log_file_spec} &",
                "\t/METADATA=${metadata_list} &",
                "\t/QUOTE_CHARACTER=${quote_character} &",
                "\t/STATUS &",
                "\t/SUCCESS=(${success-dml}) &",
                "\t/TO=${CSV-file-spec} &",
                "\t/VERBOSE &",
                ""
                
        ],
        "description": "Generate EXPORT/CSV with all Qualifers"        
    },
   "EXPORT_XML": {
        "prefix": "EXPORT/XML [Generate Qualifiers)",
        
        "body": [
            "EXPORT/XML &",           
                "\t/FROM=${db_handle}.${table} &",
                "\t/TABLE=${table} &",
                "\t/TARGET=${target}",
                ""
                
        ],
        "description": "Generate EXPORT/XML with all Qualifers"        
    },
    "EXPORT_XML_ALL": {
        "prefix": "EXTERNAL \"file_spec\" routine_name [func_return_value_keywords] [arguments] /FAILURE=(failure_dml) /SUCCESS=(sucess_dml)",
        
        "body": [
            "EXTERNAL \"${file_spec}\" ${routine} ${keyword} ${arguments} &",
                "\t/FAILURE=(${failure_dml}) &",
                "\t/SUCCESS=(${success_dml})",           
                ""
                
        ],
        "description": "Declares External Routine"        
    },
    "EXTERNAL": {
        "prefix": "EXTERNAL \"file_spec\" routine_name [func_return_value_keywords] [arguments] /FAILURE=(failure_dml) /SUCCESS=(sucess_dml)",
        
        "body": [
            "EXTERNAL \"${file_spec}\" ${routine} ${keyword} ${arguments} &",
                "\t/FAILURE=(${failure_dml}) &",
                "\t/SUCCESS=(${success_dml})",           
                ""
                
        ],
        "description": "Declares External Routine"        
    },
    "FETCH": {
        "prefix": "FETCH stream_name",
        
        "body": [
            "FETCH stream_name"
                
        ],
        "description": "Get next record from stream"        
    },
    "FETCH_ALL": {
        "prefix": "FETCH stream_name /FAILURE=(failure_dml) /SUCCESS=(success_dml)",
        
        "body": [
            "FETCH ${stream_name} /FAILURE=(${failure_dml}) /SUCCESS=($success_dml)"
                
        ],
        "description": "Get next record from stream"        
    },
    "FIND IN": {
        "prefix": "FIND IN table_name /[qualifiers]",
        
        "body": [
            "FIND IN ${tablename}",
                "\t/LOCK=${lock_type} & ! NONE, READ, WRITE &",
                "\t/SECONDARY &",
                "\t/STREAM_NAME=${stream_name} &",
                "\t/WITH=${with_field_expression}",
                ""
                
        ],
        "description": "Find records in table"        
    },
    "GOTO": {
        "prefix": "GOTO block_name",
        
        "body": [
            "GOTO ${block_name}"
                
        ],
        "description": "Goes to block"        
    },
    "IF": {
        "prefix": "IF (condition)",
        
        "body": [
            "IF ${condition}",
            "\t",
            "END_IF"
                
        ],
        "description": "If Statement"        
    },
    "ELSE": {
        "prefix": "ELSE",
        
        "body": [
            "ELSE",
            "\t"
                
        ],
        "description": "ELSE"        
    },
    "ELSE_IF": {
        "prefix": "ELSE_IF",
        
        "body": [
            "ELSE_IF",
            "\t"
                
        ],
        "description": "ELSE_IF"        
    },
    "END_IF": {
        "prefix": "END_IF",
        
        "body": [
            "END_IF"
                
        ],
        "description": "END_IF"        
    },
    "IMPORT": {
        "prefix": "IMPORT [/qualifiers]",
        
        "body": [
            "IMPORT &",
                "\t/ARCHIVE=${archive_file_spec} &",
                "\t/CHECK_ONLY &",
                "\t/COMMIT_RATE=${commit_rate} &",
                "\t/CSV &",
                "\t/DATA &",
                "\t/FAILURE=(${failure_dml}) &",
                "\t/FROM=${from_db_handle} &",
                "\t/LOG=${log_file_spec} &",
                "\t/METADATA=${metadata_list} &",
                "\t/METADATA_DUMP=${metadata_dump} &",
                "\t/NOAUDIT &",
                "\t/NOCHECK_ONLY &",
                "\t/NODATA &",
                "\t/NOLOG &",
                "\t/NOMETADATA &",
                "\t/NOSTATUS &",
                "\t/STATUS &",
                "\t/SUCCESS=(${success-dml}) &",
                "\t/TABLES=\"${tables}\" &",
                "\t/TO=${to_db_handle}",
                "\t/VERBOSE"
                
        ],
        "description": "IMPORT data to a database"        
    },
    "IMPORT_CSV": {
        "prefix": "IMPORT/CSV [/qualifiers]",
        
        "body": [
            "IMPORT/CSV &",
                "\t/CHARACTER_SET=${character_set} &",
                "\t/DOUBLE_QUOTE &",
                "\t/ESCAPE_CHARACTER=${escape_char} &",
                "\t/FAILURE=(dml-statement) &",
                "\t/FIELD_SEPARATOR=field-separator &",
                "\t/FIELDS=field-list &",
                "\t/FROM=CSV-file-specification &",
                "\t/LOG=log-file-specification &",
                "\t/METADATA=metadata-list &",
                "\t/QUOTE_CHARACTER=quote-character &",
                "\t/STATUS &",
                "\t/SUCCESS=(dml-statement) &",
                "\t/TO= database-handle.table-name &",
                "\t/VERBOSE"
                
        ],
        "description": "Import CSV into table"        
    },
    "IMPORT_XML": {
        "prefix": "IMPORT/XML [/qualifiers]",
        
        "body": [
            "IMPORT/XML &",
                "\t/CREATE &",
                "\t/CREATE_IF &",
                "\t/ERROR_TEXT=${error_text} &",
                "\t/REPLACE &",
                "\t/RESULTNAME=${resultname} &",
                "\t/SOURCE=${source} &",
                "\t/TABLE=${table}",
            ""

                
        ],
        "description": "IMPORT XML into table"        
    },
    "LOAD": {
        "prefix": "LOAD file_spec INTO table(field)",
        "body": [
            "LOAD ${file_spec} INTO ${table}(${field})",
            ""                
        ],
        "description": "Load TXT file into field"        
    },
    "MAIL": {
        "prefix": "MAIL /TO=to_address /SUBJECT=subject /TEXT=text [/FILE=$FILE_SPEC]",
        "body": [
            "MAIL /TO=${to_address} /SUBJECT=${subject} /TEXT={$text} /FILE=${file_spec}",
            ""                
        ],
        "description": "Load TXT file into field"        
    },
    "MAIL/SMTP": {
        "prefix": "MAIL/SMTP [/qualifiers]",
        "body": [
            "MAIL/SMTP &",
            "\t/Attachments=${csv_file_spec_list} &",
            "\t/Bcc=${bcc_csv_emails} &",
            "\t/Cc=${cc_csv_emails} &",
            "\t/Domain=${smtp_auth_domain} &",
            "\t/Error_Code=${gembase_smtp_error_code} &",
            "\t/Error_Text=${gembase_smtp_error_text} &",
            "\t/File=${msg_body_filename} &",
            "\t/From=${from_email} &",
            "\t/Header=${custom_header} &",
            "\t/Importance=${importance} &",
            "\t/Notify=${delivery_status_notification_keywords} &",
            "\t/Options=${options} &",
            "\t/Password=${smtp_auth_password} &",
            "\t/Port=${smtp_server_port} &",
            "\t/Reply_To=${reply_to_email} &",
            "\t/Response_Code=${smtp_server_response_code} &",
            "\t/Response_Text=${smtp_server_response_text} &",
            "\t/Sender=${sender_email} &",
            "\t/Sensitivity=${sensitivity_level} &",
            "\t/Server=${smtp_server_hostname} &",
            "\t/Subject=${subject} &",
            "\t/Text=${message_body} &",
            "\t/Timeout=${smtp_server_timeout} &",
            "\t/To=${to_csv_emails} &",
            "\t/Username=${smtp_auth_username}",
            ""
              
        ],
        "description": "Send email via SMTP"        
    },
    "MESSAGE": {
        "prefix": "MESSAGE [/qualifiers] message_name",
        "body": [
            "MESSAGE /BELL/CONFIRM/FACILITY/IDENTIFIER/SEVERITY/WAIT ${message_name}" 
              
        ],
        "description": "Display message at bottom of display window"
    },
    "OPEN_TAB": {
        "prefix": "OPEN_TAB [/qualifiers]",
        "body": [
            "OPEN_TAB [/URL=[StringExpression] &",
                "\t/WEB_APP=${web_app} &",
                "\t/FACILITY=${facility} &",
                "\t/PERFORM=${perform} &",
                "\t/DESC=${desc} &",
                "\t/NEW_WINDOW",
            ""
              
        ],
        "description": "Open a tab"
    },
    "OPEN_TEXT": {
        "prefix": "OPEN_TEXT [/APPEND|/CREATE/PDF] filename AS tag",
        "body": [
            "OPEN_TEXT ${filename} AS ${tag} &",
                "\t/APPEND &",
                "\t/CREATE &",
                "\t/PDF &",
                "\t/CHARACTER_SET=${character_set}"   
              
        ],
        "description": "Open text file"
    },
    "OPEN_URL": {
        "prefix": "OPEN_URL /URL=url {/DESC=stringexpression|/NEW_WINDOW}",
        "body": [
            "OPEN_URL /URL=${url} /DESC=${desc} /NEW_WINDOW"   
              
        ],
        "description": "Open URL"
    },
    "PERFORM": {
        "prefix": "PERFORM procedure_name",
        "body": [
            "PERFORM ${PROCEDURE_NAME}"
        ],
        "description": "Perform Procedure"
    },
    "PRINT": {
        "prefix": "PRINT expression",
        "body": [
            "PRINT ${expression}"
        ],
        "description": "Print message at bottom of display"
    },
    "PRINT_ALL": {
        "prefix": "PRINT [/qualifiers] expression",
        "body": [
            "PRINT /BELL/CONFIRM/NOBELL/NOWAIT/WAIT ${expression}"
        ],
        "description": "Print message at bottom of display"
    },
    "RANDOMIZE": {
        "prefix": "RANDOMIZE",
        "body": [
            "RANDOMIZE"
        ],
        "description": "Seed the random number generator"
    },
    "READ_LINE": {
        "prefix": "READ_LINE tag [/TARGET=target_spec]",
        "body": [
            "READ_LINE ${tag} /TARGET=$target_spec"
        ],
        "description": "Read record from text file"
    },
    "RECEIVE_DATA": {
        "prefix": "RECEIVE_DATA [/HANDLE=connect_handle] writable_data_elements",
        "body": [
            "RECEIVE_DATA /HANDLE=${handle} ${writable_data_elements}"
        ],
        "description": "Read row data from stored procedure"
    },
    "RECEIVE_TABLE": {
        "prefix": "RECEIVE_TABLE [/qualifiers] target_table [FROM source_table]",
        "body": [
            "RECEIVE_TABLE target_table_name &",
                "\tFROM ${source_table_name} &",
                "\tHANDLE=${handle}",
                "\t!/REPLACE ! truncate target table before loading data"
        ],
        "description": "Receive table from database"
    },
    "REPOSITION BY": {
        "prefix": "REPOSITION BY [-]n",
        "body": [
            "REPOSITION BY ${n}"
        ],
        "description": "Increae or decrease report form's current line count"
    },
    "REPOSITION TO": {
        "prefix": "REPOSITION TO n",
        "body": [
            "REPOSITION TO ${n}"
        ],
        "description": "Move report form's output position"
    },
    "REWIND_TEXT": {
        "prefix": "REWIND_TEXT tag",
        "body": [
            "REWIND_TEXT ${tag}"
        ],
        "description": "Move to beginning of file"
    },
    "ROLLBACK": {
        "prefix": "ROLLBACK",
        "body": [
            "ROLLBACK"
        ],
        "description": "Rollback transaction"
    },
    "SEND_DATA": {
        "prefix": "SEND_DATA data_elements",
        "body": [
            "SEND_DATA ${data_elements}"
        ],
        "description": "Send data from stored procedure"
    },
    "SEND_MESSAGE": {
        "prefix": "SEND_MESSAGE numeric_expression, text_expression",
        "body": [
            "SEND_MESSAGE ${numeric}, ${text}"
        ],
        "description": "Send message from stored procedure"
    },
    "SEND_TABLE": {
        "prefix": "SEND_TABLE [/HANDLE=connect_handle][/REPLACE] source_table_name [TO target_table_name]",
        "body": [
            "SEND_TABLE source_table_name [TO target_table_name]",
                "\t/HANDLE=${handle}",
                "! /REPLACE"
        ],
        "description": "Send table to database"
    },
    "SIGNATURE": {
        "prefix": "SIGNATURE [/qualifiers]",
        "body": [
            "SIGNATURE &",
                "\t/AUDIT=audit-file-specification &",
                "\t/DATETIME=${datetime} &",
                "\t/FACILITY=${facility} &",
                "\t/FAILURE=(${failure_dml}) &",
                "\t/NOAUDIT &",
                "\t/PASSWORD1=${password1} &",
                "\t/PASSWORD2=${password2} &",
                "\t/PURPOSE=${purpose} &",
                "\t/SAVE &",
                "\t/SUCCESS=(${success-dml}) &",
                "\t/RECALL &",
                "\t/USERNAME1=${username1} &",
                "\t/USERNAME2=${username2} &",
                "\t/USER1=${user_defined1} &",
                "\t/USER2=${user_defined2} &",
                "\t/USER3=${user_defined3} &",
                "\t/USER4=${user_defined4} &",
                "\t/USER5=${user_defined5} &",
                "\t/VALIDATION_FORM=${validation_form}"

        ],
        "description": "Signature Statemente"
    },
    "SLEEP": {
        "prefix": "SLEEP seconds",
        "body": [
            "SLEEP ${seconds}"
        ],
        "description": "Sleep for specified number of seconds"
    },
    "START_DATA_ZONE": {
        "prefix": "START_DATA_ZONE",
        "body": [
            "START_DATA_ZONE"
        ],
        "description": "START_DATA_ZONE"
    },
    "START_GTID": {
        "prefix": "START_GTID",
        "body": [
            "START_GTID"
        ],
        "description": "START_GTID"
    },
    "START_STREAM": {
        "prefix": "START_STREAM stream_name /TABLE=table [/qualifiers]",
        "body": [
            "START_STREAM ${stream} /TABLE=${table} &",
                "\t/COMMIT_RATE=${commit_rate} &",
                "\t/FIRST=${max_records} &",
                "\t/GROUPED_BY=${grouped_by} &",
                "\t ! or",
                "\t/GROUPED_BY=${grouped_by} &",
                "\t/JOINED_TO=${joined_to} &",
                "\t/LOCK=${lock_type} & ! NONE, READ, WRITE &",
                "\t/REDUCED_TO=${reduced_to} &",
                "\t ! or &",
                "\t/REDUCED_TO=${reduced_to} &",
                "\t/SECONDARY &",
                "\t/SELECTION=expression &",
                "\t/SORTED_BY=([-]field_name[,...]) &",
                "\t ! or &",
                "\t/SORTED_BY=${sorted_by} &",
                "\t ! or &",
                "\t/SORTED_BY=${sorted_by} &",
                "\t/STATISTIC=${variable}=${statistic_function} &",
                "\t/TABLE=${table} &",
                "\t ! or &",
                "\t/TABLE=${table} &",
                "\t/WITH=${with_field_expression}",
                "\t ! or &",
                "\t/WITH=${with_field_expression}",
            ""

        ],
        "description": "START_STREAM"
    },
    "START_TRANSACTION": {
        "prefix": "START_TRANSACTION",
        "body": [
            "START_TRANSACTION"
        ],
        "description": "Starts read/write transaction"
    },    
    "START_TRANSACTION READ_ONLY": {
        "prefix": "START_TRANSACTION READ_ONLY",
        "body": [
            "START_TRANSACTION READ_ONLY"
        ],
        "description": "Starts read transaction"
    },    
    "SWITCH": {
        "prefix": "SWITCH form_name",
        "body": [
            "SWITCH ${form}"
        ],
        "description": "Exit current form and execute form"
    },   
    "SWITCH_FILE_SPEC": {
        "prefix": "SWITCH \"form_file_spec\" [form_name] [(arguments)]",
        "body": [
            "SWITCH “${form_file_spec}” ${form} (${arguments})"
        ],
        "description": "Exit current form by calling DMC or DML and execute form"
    },   
    "SWITCH_BASE": {
        "prefix": "SWITCH_BASE form_name",
        "body": [
            "SWITCH_BASE ${form}"
        ],
        "description": "Automatically exit current form and execute form"
    },   
    "SWITCH_BASE_SPEC": {
        "prefix": "SWITCH_BASE \"form_file_spec\" [form_name] [(arguments)]",
        "body": [
            "SWITCH_BASE “${form_file_spec}” ${form} (${arguments})"
        ],
        "description": "AUtomatically exit current form by calling DMC or DML and execute form"
    },  
    "SWITCH_BASE_EXIT": {
        "prefix": "SWITCH_BASE %EXIT",
        "body": [
            "SWITCH_BASE %[EXIT]"
        ],
        "description": "Exit form which contains /BASE qualifier"
    },   
    "TABLE_SEARCH": {
        "prefix": "TABLE_SEARCH table_name(fields) [/qualifiers]",
        "body": [
            "TABLE_SEARCH ${table}(${fields}) &",
                "\t/BACK=(${dml_back}) &",
                "\t/COL=${col_num} &",
                "\t/ERROR=${error} &",
                "\t/EXIT=(${dml_exit}) &",
                "\t/FIRST=${max_records} &",
                "\t/HEIGHT=${height_num} &",
                "\t/NOERROR &",
                "\t/REDUCED_TO=${reduced_to} &",
                "\t ! or &",
                "\t/REDUCED_TO=${reduced_to} &",
                "\t ! or &",
                "\t/REDUCED_TO=${reduced_to} &",
                "\t/ROW=${row_num} &",
                "\t/SELECTION=${selection} &",
                "\t ! or &",
                "\t/SELECTION=${selection_all_or_any} & ! ALL or ANY",
                "\t/SELECT_ONE &",
                "\t/SORTED_BY=(${sorted_by}) &",
                "\t ! or &",
                "\t/SORTED_BY=(${sorted_by}) &",
                "\t ! or &",
                "\t/SORTED_BY=${sorted_by} &",
                "\t/WITH=${with_field_expression}",
            ""
            
            
        ],
        "description": "Display data from table/fields in an LOV window"
    },   
    "TRANSFER": {
        "prefix": "TRANSFER command_filename [/qualifiers]",
        "body": [
            "TRANSFER ${command_filename} &",
                "\t/POSITION=${position} &",
                "\t/LENGTH=${length} &",
                "\t/SCALE=${scale} &",
                ""
        ],
        "description": "Transfer file into database"
    },  
    "WHILE": {
        "prefix": "WHILE (condition)",
        "body": [
            "WHILE (${condition})",
            "\t",
            "\t",
            "END_WHILE"
        ],
        "description": "While loop"
    },  
    "WRITE": {
        "prefix": "WRITE tag data",
        "body": [
            "WRITE ${tag} ${data}"
        ],
        "description": "Write data into buffer"
    },  
    "WRITE_LINE": {
        "prefix": "WRITE_LINE tag [data]",
        "body": [
            "WRITE_LINE ${tag} ${data}"
        ],
        "description": "Write record into buffer"
    },  
    "XML_RECEIVE_TABLES": {
        "prefix": "XML_RECEIVE_TABLES [/ERROR_TEXT=error-text]",
        "body": [
            "XML_RECEIVE_TABLES /ERROR_TEXT=${error_text}"
        ],
        "description": "Receive XML tables"
    },  
    "XML_SEND_TABLE": {
        "prefix": "XML_SEND_TABLE table-name [/TABLE_OPTIONS=table-options] [/FIELD_OPTIONS=field-options]",
        "body": [
            "XML_SEND_TABLE ${table} /TABLE_OPTIONS=${table_options} /FIELD_OPTIONS=${field_options}"
        ],
        "description": "Send XML tables"
    },  
    "$": {
        "prefix": "$ command",
        "body": [
            "$ ${command}"
        ],
        "description": "Operating System Command"
    },  

/*



TODO

    
    
    */
    
    // Functions
    
    
/*

AMONG(${value}, {$range-lists})
ASCII($char)
BASE64_DECODE($string)
BASE64_ENCODE($string)
CHR($number)
COMPRESS($string)
COMPRESS_ALL ($string)
CSV_MERGE(${array})
CSV_MERGE(${array}, ${count})
DATA_COMPRESS(${string})
DATA_UNCOMPRESS(${string})
ELEMENT(${element_number, $string)
ELEMENT(${element_number, $string, ${delimiter})
EXPAND(${string})
IS_TRUE($Pstring})
LEFT(${string},${end_position})
LEN(${string})
LOWERCASE(${string})
LPAD(${string}, $length)
LPAD(${string}, $length, $pad-character)
LTRIM(${string})
MATCHING($candidate_string, ${pattern_string})
MERGE(${#array()})
MERGE(${#array()}, ${count}])
MID(${string},${start_pos},${length})
POS(${string},${substring},${start_position})
QUOTE(${input_string})
RANGE_MERGE(${#from_array()}, ${#to_array()})
RANGE_MERGE(${#from_array()}, ${#to_array()}, ${count}])
REPLACE(${string, ${start_pos}, ${end_pos}, ${replacement_string})
RIGHT(source_string,start_position)
RMD160(input-string)
RPAD(input-string, length [,pad-character])
RTRIM(input-string)
SCRAMBLE(input-string)
SEG(input-string, starting-position, ending-positon)
STARTING_WITH(source-string, sub-string)
STRING(duplication_count,ascii_character_value)
TRANSLATE(source_string, source_character_set_name,
target_character_set_name)
TRIM(source_string)
UNQUOTE(input-string)
UNSCRAMBLE(input-string)
UPPERCASE(source_string)
NUMERIC FUNCTIONS
ACOS(cosine)
ACOSD(value)
ACOSH(value)
ACOT(value)
ACOTD(value)
ACOTH(value)
ACSC(value)
ACSCD(value)
ACSCH(value)
ASEC(value)
ASECH(value)
ASIND(value)
ASINH(value)
ATAND(value)
ATAND(value)
ATAND2(value)
ATANH(value)
ASIN(sine)
ATAN(tangent)
ATAN2(sine,cosine)
BINARY_TO_POLY(binary_string,format)
CEIL(number)
COS(angle)
COSD(value)
COSH(value)
COT(value)
COTD(value)
COTH(value)
CSC(value)
CSCD(value)
CSCH(value)
DEG(value)
EXP(value)
EXP2(value)
EXP10(value)
FAC(value)
FIX(value)
FRAC(value)
FLOOR(number)
GCD(value,value)
INT(real_number)
LOG(value)
LOG2(value)
LOG10(value)
MAX(value, value, value, …)
MIN(value, value, value, …)
MOD(dividend,divisor)
MROUND(num,multiple)
POLY_TO_BINARY (value,format[,length][,scale]}
RAD(value)
RANDOM(range)
ROUND(real_number,decimal_place)
SEC(value)
SECD(value)
SECH(value)
SIGN(value)
SIN(angle)
SIND(angle)
SINH(value)
SQRT(value)
TAN(angle)
TAND(value)
TANH(value)
DATE AND TIME FUNCTIONS
DATE(days)
DATE_SECONDS(seconds)
DATE_TIME(source)
DAYS(source_date)
DAY_OF_WEEK(source_date)
DAYS_IN_MONTH(input-date)
NEXT_MONTH(input-date)
SECONDS(source_date)
DATA DEFINITION FUNCTIONS
Built-in data definition functions enable you to extract metadata
pertaining to fields, tables, indices, views, and facilities.
Field Functions
Use the following syntax:
field_function([database_handle,]table_name,field_name)
or
field_function([table_name,]field_name)
where field_function is the name of one of the following
functions.
FIELD_BASED_ON
FIELD_CLUSTER
FIELD_DATATYPE
FIELD_DEFAULT
FIELD_DESCRIPTION
FIELD_FLAG
FIELD_HEADING
FIELD_HELP
FIELD_I_LENGTH
FIELD_I_MASK
FIELD_INITIAL_VALUE
FIELD_MISSING
FIELD_NAME
FIELD_NATIVE
FIELD_O_LENGTH
FIELD_O_MASK
FIELD_PROMPT
FIELD_SCALE
FIELD_SHORT-PROMPT
FIELD_SIZE
FIELD_SOURCE
FIELD_USER_ARGUMENT
FIELD_VALID_VALUES
FIELD_VALIDATION
FIELD_VIEW_BASE
Table Functions
Use the following syntax:
table_function([database_handle.]table_name)
where table_function is the name of one of the following table
functions.
TABLE_ARCHIVABLE
TABLE_DESCRIPTION
TABLE_CLUSTER
TABLE_FIELDS
TABLE_FILL
TABLE_FLAGS
TABLE_FREE
TABLE_GROW
TABLE_GROW_PCT
TABLE_IFLAGS
TABLE_MAX_EXTENTS
TABLE_MIN_EXTENTS
TABLE_NAME
TABLE_NONPID_FIELDS
TABLE_PID
TABLE_PID_FIELDS
TABLE_SECURITY
TABLE_SIZE
TABLE_STORAGE
TABLE_TYPE
Index Functions
Use the following syntax:
index_function([database_handle.]index_name)
where index _function is the name of one of the following index
functions.
INDEX_FIELDS
INDEX_FILL
INDEX_FREE
INDEX_GROW
INDEX_GROWTH_PCT
INDEX_MAX_EXTENTS
INDEX_MIN_EXTENTS
INDEX_ORDER
INDEX_SIZE
INDEX_STORAGE
INDEX_TABLE
INDEX_TYPE
INDEX_UNIQUE
View Functions
Use the following syntax:
view_function([database_handle.]view_name)
where view_function is the name of the view function.
VIEW_SOURCE

Facility Functions
Use the following syntax:
facility_function([[database_handle.]system_name:]facility_nam
e)
or
facility_function(#variable_name)
where facility_function is the name of one of the following
facility functions.
FACILITY_CLASS
FACILITY_DESCRIPTION
FACILITY_DML
FACILITY_MENU_FILE
FACILITY_MENU_FORM
FACILITY_NAME
FACILITY_SYSTEM
FACILITY_TAG
MISCELLANEOUS FUNCTIONS
ERROR_TEXT(error_no,flags)
GET_SCV(svc_string)
IS_MARKED([database_handle,]table_name)
IS_MARKED_ON_STREAM(stream_name, table_name)
IS_NULL([database_handle.]”table_name”,"field_name")
IS_NULL_ON_STREAM(“stream_name”,”table_name”,”field_
name”)
LTOTAL(break_no,total_column_number)
MASK(mask_specification,source_string)
MESSAGE([database_handle.]message_name[,arg1[arg2[,…]]]
)
PARAMETER{[database_handle.]parameter_name[,source_dat
e])
8 Built-In Functions
RECORD_ADDRESS(table_spec)
STREAM_DATA(stream_name,table_name,field_name)
TABLE_CHECK([database_handle,]table_name,field_name)
TABLE_DATA([database_handle,]table_name,field_name)
TOTAL(total_number)
FILE MANIPULATION FUNCTIONS
status = DELETE_FILE(filename, default-filename)
FIND_FILE(file_spec[,default_spec)
#result=PARSE_FILENAME(filename, default-filename,
options)
[NO]FULL
[NO]NODE
[NO]DEVICE
[NO]DIRECTORY
[NO]NAME
[NO]TYPE
[NO]VERSION
[NO]CONCEAL
[NO]SYNTAX_ONLY
TEMPORARY_FILENAME(name-string)

*/
    
    "ABS": {
        "prefix": "ABS()",
        "body": [
            "ABS($0)"
        ],
        "description": "Returns the absolute value"
    },
    "MAX": {
        "prefix": "MAX",
        "body": [
            "MAX(${value1},${value2})"
        ],
        "description": "Returns the maximum value of 2 to 255 numeric values"
    }
    
 // Special Vars
 
 /*
 
TODO
 
%ACCOUNT
%ACTUAL_BREAK
%ADD
%ADVANCED_USER
%ARCHIVE
%BITMAP
%BROADCAST
%CAT_FILTER
%CURRENT_BREAK
%DATABASE
%DEFAULT_ENGINE
%DELETE
%E
%EDIT_MODE
%ENTRY_MENU
%EXIT_FORM_ACTIVE
%EXIT_FORM_ENABLED
%EXIT_FORM_FILENAME
%EXIT_FORM_FORMNAME
%EXIT_FORWARD
%FACILITY
%FACILITY_DATABASE
%FACILITY_NAME
%FACILITY_SYSTEM
%FIND
%FORM_FILE
%FORM_NAME
%GEM_INIT
%GTID
%GTID_LEVEL
%HARDWARE
%HELP_LIBRARY
%HOSTID
%INPUT_BACKGROUND
%INPUT_DATE_FORMAT
%INPUT_FORGROUND
%INPUT_PROMPT
%INPUT_TIMEOUT
%INPUT_UPDATE
%INTERRUPT
%INTERRUPT_COMMAND
%IS_ADMIN
%KEYBOARD_FILE
%LANGUAGE
%LOCK_OPTIONS
%MASK_CURRENCY_SIGN
%MASK_DIGIT_SEPARATOR
%MASK_RADIX_POINT
%MODE
%MODIFY
%NODENAME
%NOW
%OPERATING_SYSTEM
%PAGE
%PERFORM
%PI
%PID
%PLATFORM
%PERCISION
%PRINT_MODE
%QUERY_CUR_REC
%QUERY_MAX_REC
%QUERY_MODE
%REPORT_DATE
%REPORT_FORM_FEEDS
%REPORT_PAGE_SIZE
%REPORT_MODE
%REPORT_NAME
%ROW_NUMBER
%SCREEN_MODE
%SCREEN_WIDTH
%SERVER
%SHADOW_LEVEL
%SIGNATURE_ID
%STATUS
%STATUS_FREQUENCY
%SYSTEM
%TARGETID
%TEMPORARY_DIRECTORY
%TERMINAL
%TEXTFILE_MODE
%THIN_CLIENT
%THIN_CLIENT_CHARSET
%THIN_CLIENT_HW
%THIN_CLIENT_IPCNAME
%THIN_CLIENT_MODE
%THIN_CLIENT_OS
%THIN_CLIENT_REPORT_DIR
%THIN_CLIENT_TYPE
%THIN_CLIENT_USERNAME
%THIN_SERVER
%THIN_SERVER_CHARSET
%THIN_SERVER_DBCHARSET
%THIN_SERVER_HW
%THIN_SERVER_IPCNAME
%THIN_SERVER_MODE
%THIN_ SERVER_OS
%THIN_SERVER_REPORT_DIR
%THIN_SERVER_USERNAME
%TITLE_FORM
%TODAY
%TRANS_LEVEL
%UIC
%UIC_GRP
%UIC_MEM
%UNIX
%USERNAME
%VERSION
%WD
%XPID
VALUE SYMBOLS
%BACK
%DATA
%DEADLOCK
%EMPTY
%EXIT
%FAILURE
%NORMAL
%SUCCESS
SECURITY VALUE SYMBOLS
%ADMIN_ACCESS
%CHANGE_ACCESS
%CONTROL_ACCESS
%DEFINE_ACCESS
%DELETE_ACCESS
%ERASE_ACCESS
%MODIFY_ACCESS
%OPERATOR_ACCESS
%READ_ACCESS
%SHOW_ACCESS

*/
 
    
}