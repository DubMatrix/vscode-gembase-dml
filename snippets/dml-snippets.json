{
    
    // Forms
    "MENU_FORM": {
        "prefix": "MENU_FORM form_name",
        "body": [
            "MENU_FORM ${form_name} &",                           
                "\t/COL=${col_num} & ",        
                "\t/HEIGHT=${height_num} & ",                        
                "\t/ROW=${row_num} & ",             
                "\t/WIDTH=${width_num}",
                "\t",            
                "\tITEM_BLOCK ${block_name1} /ROW=${item1_row_num} /COL=${item_col_num} /FACILITY=${facility_name1}",
                "\t",
                "\tITEM_BLOCK ${block_name2} /ROW=${item2_row_num} /COL=${item_col_num} /FACILITY=${facility_name2}",            
                "\t",
                "\t${0}",
                "\t",
            "END_FORM "
            
        ],
        "description": "Menu Form"
    },
    
        "MENU_FORM ALL": {
        "prefix": "MENU_FORM form_name [/qualifiers]",
        "body": [
            "MENU_FORM ${form_name} &",            
                "\t/ATTRIBUTES=${attributes} & ! BLINK, BOLD, NOBORDER, REVERSE, UNDERLINE",
                "\t/COL=${col_num} & ",
                "\t/DEFAULT_TAG=${menu_item} & ",
                "\t/HEIGHT=${height_num} & ",            
                "\t/READ_ONLY & ",
                "\t/ROW=${row_num} & ",
                "\t/SYSTEM=${database}.${system} & ",
                "\t/TAG_LENGTH=${tag_length} &",
                "\t/TITLE=\"${title}\" & ",
                "\t/WIDTH=${width_num}",
                "\t",            
                "\tITEM_BLOCK ${block_name1} /ROW=${item1_row_num} /COL=${item_col_num} /FACILITY=${facility_name1}",
                "\t",
                "\tITEM_BLOCK ${block_name2} /ROW=${item2_row_num} /COL=${item_col_num} /FACILITY=${facility_name2}",            
                "\t",
                "\t${0}",
                "\t",
            "END_FORM "
            
        ],
        "description": "Menu Form with all Qualifiers"
    },

    "NORMAL_FORM": {
        "prefix": "FORM form_name",
        "body": [
            "FORM ${form_name} &",                          
                "\t/COL=${col_num} &",              
                "\t/HEIGHT=${height_num} &",             
                "\t/WIDTH=${width} &",
                "\t/TITLE=\"${title}\"",
                "\t",
                "\t${0}",
                "\t",
            "END_FORM"
            
        ],
        "description": "Normal Form"
    },

    "NORMAL_FORM ALL": {
        "prefix": "FORM form_name [/qualifiers]",
        "body": [
            "FORM ${form_name} &",            
                "\t/ATTRIBUTES=${attributes} & ! BLINK, BOLD, NOBORDER, REVERSE, UNDERLINE",
                "\t/BASE &",
                "\t/BREAK=${start_form},${end_form},${expression} & ",
                "\t/BREAK0=${pre_form},${post_form} &",
                "\t/COL=${col_num} &",
                "\t/FIRST=${max_records} &",
                "\t/GROUPED_BY=${grouped_by} &",
                "\t/HEIGHT=${height_num} &",
                "\t/JOINED_TO=${joined_to_table} &",
                "\t/LOCK=${lock_type} & ! NONE, READ, WRITE",
                "\t/NOEXIT_FORWARD &",
                "\t/READ_ONLY &",
                "\t/REDUCED_TO=${reduced_to} &", 
                "\t/REMAIN &",
                "\t/REPEAT[=NOCLEAN]  & ! repeat repeatedly",
                "\t/ROW=row_num &",
                "\t/SECONDARY &",
                "\t/SELECTION=${selection} &",
                "\t/SORTED_BY=(${sorted_by}) &",
                "\t/STATISTIC=${var}=${statistic_function} &",
                "\t/STREAM_NAME=${stream_name} &",
                "\t/TABLE=${table} &",
                "\t/TITLE=\"${title}\" &",
                "\t/WIDTH=${width} &",
                "\t/WITH=${with_field_expression}",
                "\t",
                "\t${0}",
                "\t",
            "END_FORM"
            
        ],
        "description": "Normal Form with all Qualifiers"
    },


    "PROCEDURE_FORM": {
        "prefix": "PROCEDURE_FORM form_name",
        "body": [
            "PROCEDURE_FORM ${form_name}",
                "\t",
                "\t${0}",
                "\t",
            "END_FORM"            
        ],
        "description": "Procedure Form"
    },

    
    "PROCEDURE_FORM ALL": {
        "prefix": "PROCEDURE_FORM ALL QUALIFIERS",
        "body": [
            "PROCEDURE_FORM ${form_name} ${[arguments]} &",            
                "\t/BASE &",
                "\t/BREAK=${start_form},${end_form},${expression} & ",                           
                "\t/BREAK0=${pre_form},${post_form} &",
                "\t/COMMIT_RATE=${commit_rate} &",
                "\t/FIRST=${max_records} &",
                "\t/GROUPED_BY=${grouped_by} &",
                "\t/JOINED_TO=${joined_to_table} &",
                "\t/LOCK=${lock_type} & ! NONE, READ, WRITE",               
                "\t/NOEXIT_FORWARD &",
                "\t/READ_ONLY &",
                "\t/REDUCED_TO=${reduced_to} &",
                "\t/SECONDARY &",                
                "\t/SELECTION=${selection} &",
                "\t/SORTED_BY=(${sorted_by}) &",
                "\t/STATISTIC=${var}=${statistic_function} &",
                "\t/STREAM_NAME=${stream_name} &",               
                "\t/STATUS &",
                "\t/STREAM_NAME=${stream_name} &",
                "\t/TABLE=${table} &",
                "\t/WITH=${with_field_expression}",
                "\t",
                "\t${0}",
                "\t",
            "END_FORM"            
        ],
        "description": "Procedure Form with all Qualifiers"
    },
    
    "QUERY_FORM": {
        "prefix": "QUERY_FORM form_name",
        "body": [
            "QUERY_FORM ${form_name} &",                         
                "\t/COL=${col_num} &",         
                "\t/HEIGHT=${height_num} &",      
                "\t/ROW=${row_num} &",          
                "\t/WIDTH=${width} &",
                "\t/TABLE=${table}",
                "\t",
                "\t${0}",
                "\t",
            "END_FORM"            
        ],
        "description": "Query Form"
    },    
    
    
    "QUERY_FORM_ALL": {
        "prefix": "QUERY_FORM form_name [arguments] [/qualifiers]",
        "body": [
            "QUERY_FORM ${form_name} ${[arguments]} &",                         
                "\t/ADD_FORM=${add_form_name} &",
                "\t/ATTRIBUTES=${attributes} & ! BLINK, BOLD, NOBORDER, REVERSE, UNDERLINE",
                "\t/BASE &",            
                "\t/COL=${col_num} &",
                "\t/DELETE_FORM=${delete_form} &",
                "\t/FIND_FORM=${find_form} &",
                "\t/FIRST=${max_records} &",                
                "\t/HEIGHT=${height_num} &",
                "\t/JOINED_TO=${joined_to_table} &",
                "\t/LOCK=${lock_type} & ! NONE, READ, WRITE",
                "\t/MODIFY_FORM=${modify_form} &",
                "\t/NOEXIT_FORWARD &",
                "\t/OPTIONS=${options} & ! EXECUTE, EXIT_EMPTY, NODELETE, NOFIND, NOINSERT, NOMODIFY, START_INSERT" ,
                "\t/READ_ONLY &",
                "\t/REDUCED_TO=${reduced_to} &", 
                "\t/REMAIN &",
                "\t/REPEAT[=NOCLEAN]  & ! repeat repeatedly",
                "\t/ROW=row_num &",
                "\t/SELECTION=${selection} &",
                "\t/SORTED_BY=(${sorted_by}) &",
                "\t/TABLE=${table} &",
                "\t/TITLE=\"${title}\" &",
                "\t/WIDTH=${width} &",
                "\t/WITH=${with_field_expression}",
                "\t",
                "\t${0}",
                "\t",
            "END_FORM"
        ],
        "description": "Query Form with all Qualifiers"
    },    
    
    "REPORT_FORM": {
        "prefix": "REPORT_FORM form_name",
        "body": [
            "REPORT_FORM ${form_name} &",
                "\t/TABLE=${table}",
                "\t",
                "\tOUTPUT_BLOCK ${block_name} /ROW=${output_row_num} /COL=${output_col_num} &",
                "\t\t/SOURCE=${source}",
                "\t",
                "\t${0}",
                "\t",
            "END_FORM"
        ],
        "description": "Report Form"
    },  
    
        "REPORT_FORM ALL": {
        "prefix": "REPORT_FORM form_name [/qualifiers]",
        "body": [
            "REPORT_FORM ${form_name} &",              
                "\t/BASE &",
                "\t/BEGIN_ROW=${begin_row_num} &",
                "\t/BREAK=${start_form},${end_form},${expression} &",                           
                "\t/BREAK0=${pre_form},${post_form} &",
                "\t/COLUMN_HEADINGS=${col_heading_form} &",
                "\t/COLUMN_SPACING=${col_spacing_num} &",
                "\t/END_ROW=${end_row_num} &",
                "\t/FIND_FORM=${find_form} &",
                "\t/FIRST=${max_records} &",
                "\t/FOOTING=${footing} &",
                "\t/FOOTING_FORM=${footing_form} &",               
                "\t/GROUPED_BY=${grouped_by} &",
                "\t/HEADING=${heading} &",
                "\t/HEADING_FORM=${heading_form} &",
                "\t/HEIGHT=${height_num} &",
                "\t/JOINED_TO=${joined_to_table} &",
                "\t/LFOOTING=${lfooting} &",
                "\t/LHEADING=${lheading} &",
                "\t/LINES_AFTER=${lines_after} & ! number or \"TOP_OF_PAGE\"", 
                "\t/LINES_BEFORE=${lines_before} & ! number or \"TOP_OF_PAGE\"",
                "\t/LOCK=${lock_type} & ! NONE, READ, WRITE",
                "\t/NOSTATUS &",
                "\t/OPTIONS=${options} & ! COMPLETE, CONTINUE, INFINITE, MERGED, NOUNDERLINES, OVERLAID, PAGE_BREAK_REPRINT, PRINT, SUMMARY, ZEROSUPPRESS",
                "\t/OUTPUT=${output} &",
                "\t/PDF(${pdf_options}=${value}) &",
                "\t/READ_ONLY &",
                "\t/REDUCED_TO=\"${reduced_to}\" &",
                "\t/RFOOTING=${rfooting} &",
                "\t/RHEADING=${rheading} &",
                "\t/SECONDARY &",
                "\t/SELECTION=${selection} &",
                "\t/SORTED_BY=${sorted_by} &",
                "\t/STATISTIC=${variable}=${statistic_function} &",
                "\t/STATUS &",
                "\t/STREAM_NAME=${stream} &",
                "\t/TABLE=${table} &",
                "\t/WIDTH=${width} &",
                "\t/WITH=${with} &",
                "\t",
                "\t${0}",
                "\t",
            "END_FORM"
        ],
        "description": "Report Form with all Qualifiers"
    },  
    
   "TABLE_FORM": {
        "prefix": "TABLE_FORM form_name",
        "body": [
            "TABLE_FORM ${form_name} &",
                "\t/TABLE=${table} &",
                "\t/ROW=${row_num} &",                
                "\t/COL=${col_num} &",
                "\t/HEIGHT=${height_num} &",
                "\t/WIDTH=${width}",
                "\t",
                "\t${0}",
                "\t",
            "END_FORM"
        ],
        "description": "Generate Table Form"
    },  


   "TABLE_FORM ALL": {
        "prefix": "TABLE_FORM form_name [/qualifiers]",
        "body": [
            "TABLE_FORM ${form_name} &",
                "\t/ALTERNATE_FORM=${alt_form} &",
                "\t/ATTRIBUTES=${attributes} & ! BLINK, BOLD, NOBORDER, REVERSE, UNDERLINE",
                "\t/BASE &",
                "\t/BEGIN_ROW=${begin_row_num} &",
                "\t/COL=${col_num} &",
                "\t/COLUMN_HEADING_ROW=${col_heading_row_num} &",
                "\t/DELETE_FORM=${delete_form} &",
                "\t/END_ROW=${end_row_num} &",
                "\t/FIND_FORM=${find_form} &",
                "\t/FIRST=${max_records} &",
                "\t/HEIGHT=${height_num} &",
                "\t/INPUT_ROW_HEIGHT=${input_row_height} &",
                "\t/JOINED_TO=${joined_to} &",
                "\t/LOCK=${lock_type} & ! NONE, READ, WRITE &",
                "\t/NOERROR &",
                "\t/NOEXIT_FORWARD &",
                "\t/OPTIONS=${options} & ! DISPLAY_RO, EXIT_EMPTY, FAST_INSERT, INSERT_FIRST, INSERT_END, MENU, NODELETE, NOEDIT, tNOINSERT, NOMODIFY, POSITION_AT_END, SELECT_ALL, SELECT_ONE, START_FIND",              
                "\t/READ_ONLY &",
                "\t/REDUCED_TO=${reduced_to} &",
                "\t/REMAIN &",
                "\t/ROW=${row_num} &",
                "\t/ROW_HEIGHT=${row_height} &",
                "\t/SECONDARY &",
                "\t/SELECTION=${selection} &",
                "\t/SEQUENCE=${seq_field_name} &",
                "\t/SEQUENCE_INCREMENT=${seq_increment} &",
                "\t/SORTED_BY=${sorted_by} &",
                "\t/TABLE=${table} &",
                "\t/TITLE=\"${title}\" &",
                "\t/WIDTH=${width_num} &",
                "\t/WITH=${with}",
                "\t",
                "\t${0}",
                "\t",
            "END_FORM"
        ],
        "description": "Generate Table Form with ALL Qualifiers"
    },  
            
    // Declarations
        
    "TITLE facility_name, \"title_text\"": {
        "prefix": "TITLE",
        "body": [
            "TITLE ${facility_name}, \"${title_text}\"",
            "${0}"
        ]
    },
    
    
    // Blocks
    "BEGIN_BLOCK": {
        "prefix": "BEGIN_BLOCK block_name",
        "body": [
            "BEGIN_BLOCK ${block_name}",
                "\t",
                "\t${0}",
                "\t",
            "END_BLOCK"
        ],
        "description": "Generate Begin Block"
    },
    "BEGIN_BLOCK DISPLAY_ONLY": {
        "prefix": "BEGIN_BLOCK /DISPLAY_ONLY block_name",
        "body": [
            "BEGIN_BLOCK /DISPLAY_ONLY ${block_name}",
                "\t",
                "\t${0}",
                "\t",
            "END_BLOCK"
        ],
        "description": "Generate Begin Block with /DISPLAY_ONLY"
    },
    "INPUT_BLOCK": {
        "prefix": "INPUT_BLOCK block_name",
        "body": [
            "INPUT_BLOCK ${block_name} &",
                "\t/ROW=${row_num} &",
                "\t/COL=${col_num} &",
                "\t/TARGET=${target}",
            "${0}"
        ],
        "description": "Generate Input Block"        
    },    
    "INPUT_BLOCK ALL": {
        "prefix": "INPUT_BLOCK block_name [/qualifiers]",
        "body": [
            "INPUT_BLOCK ${block_name} &",
                "\t/ABSOLUTE_POSITION &",
                "\t/ATTRIBUTES=${attributes} & ! BLINK, BOLD, FORCE, NONE, REVERSE, UNDERLINE",
                "\t/BACK=(${back_dml}) &",
                "\t/COL=${col} & ! CENTER, LEFT, RIGHT",
                "\t/DISPLAY_LENGTH=${display_number} &",
                "\t/DOMAIN=${domain_table} &",
                "\t/EXIT=(${exit_dml}) &",
                "\t/EXIT_FORWARD=(${exit_forward}) &",
                "\t/HEADING=${heading} &",
                "\t/HEIGHT=${height_num} &",
                "\t/INPUT_MASK=${input_mask} &",
                "\t/LEN=${len_num} &",
                "\t/LOV=${lov_table}(${lov_fields}) &",
                "\t/LOV_AUTO_SELECT &",
                "\t/LOV_COL=${lov_col} &",
                "\t/LOV_DATA=${lov_data_field} &",
                "\t/LOV_FIRST=${lov_first} &",
                "\t/LOV_HEIGHT=${lov_height} &",
                "\t/LOV_NOHEADING &",
                "\t/LOV_NOSEARCH &",
                "\t/LOV_REDUCED_TO=${lov_reduced_to} &",
                "\t/LOV_ROW=${lov_row_num} &",
                "\t/LOV_SECONDARY &",
                "\t/LOV_SELECTION=${lov_selection} &",
                "\t/LOV_SORTED_BY=${lov_sorted_by} &",
                "\t/LOV_WIDTH=${lov_width} &",
                "\t/LOV_WITH=${lov_with} &",
                "\t/NEW &",
                "\t/NOCLEAR_BUFFER &",
                "\t/NO_DOMAIN &",
                "\t/NOLOV_DATA &",
                "\t/NOUNDERLINES &",
                "\t/OPTIONS=${options} & ! DOCUMENTARY_AT_END, DOMAIN_LOCK_NONE, DOMAIN_LOCK_WRITE, DOCUMENTARY_RO, NOLOV_ALLOWED",
                "\t/PROMPT=${prompt} &",
                "\t/PROTECT &",
                "\t/ROW=${row_num} &",
                "\t/SOURCE=${source} &",
                "\t/SOURCE_IF=(${source_if_condition}), ${source_if_default} &",
                "\t/TARGET=${target} &",
                "\t/TITLE=\"${title}\" &",
                "\t/USE_IF=(${use_if_condition}) &",
                "\t/USER_KEY n=(${user_key}) &",
                "\t/USING=${using_keywords}",
            "${0}"
        ],
        "description": "Generate Input Block with ALL Qualifiers"        
    },    
    
     "ITEM_BLOCK": {
        "prefix": "ITEM_BLOCK block_name",
        "body": [
            "ITEM_BLOCK ${block_name} &",
                "\t/ROW=${row_num} &",
                "\t/COL=${col_num} &",
                "\t/FACILITY=${facility}",
            "${0}"
        ],
        "description": "Generate Item Block"        
    },    
    
    "ITEM_BLOCK ALL": {
        "prefix": "ITEM_BLOCK block_name [/qualifiers]",
        "body": [
            "ITEM_BLOCK ${block_name} &",
                "\t/ATTRIBUTES=${attributes} & ! BLINK, BOLD, FORCE, NONE, REVERSE, UNDERLINE",
                "\t/COL=${col} &",
                "\t/FACILITY=${facility} &",
                "\t/PROMPT=${prompt} &",
                "\t/ROW=${row_num} &",
                "\t/SOURCE=${source} &",
                "\t/TAG=${tag} &",
                "\t/TAG_LENGTH=$tag_length} &",
                "\t/USE_IF=(${use_if_condition}) &",
            "${0}"
        ],
        "description": "Generate Item Block with ALL Qualifiers"        
    },    
    
    "MENU_BLOCK": {
        "prefix": "MENU_BLOCK block_name",
        "body": [
            "MENU_BLOCK ${block_name} &",
                "\t/ROW=${row_num} &",
                "\t/COL=${col_num} &",
                "\t/FACILITY=${facility}",
            "${0}"
        ],
        "description": "Generate Menu Block"        
    },    
    "MENU_BLOCK ALL": {
        "prefix": "MENU_BLOCK block_name [/qualifiers]",
        "body": [
            "MENU_BLOCK ${block_name} &",
                "\t/BACK=(${back_dml}) &",
                "\t/COL=${col} &",
                "\t/EXIT=(${exit_dml}) &",
                "\t/EXIT_FORWARD=(${exit_forward_dml}) &",
                "\t/HEIGHT=${height_num} &",
                "\t/ITEM=${item} &",
                "\t/ITEM_IF=${item_if} &",
                "\t/NOREPEAT &",             
                "\t/ROW=${row_num} &",
                "\t/SOURCE=${source} &",
                "\t/SOURCE_IF=${source_if} &",
                "\t/TARGET=${target} &",
                "\t/TITLE=\"${title}\" &",
                "\t/USE_IF=(${use_if_condition})",
            "${0}"
        ],
        "description": "Generate Menu Block with ALL Qualifiers"        
    },    
    "OUTPUT_BLOCK": {
        "prefix": "OUTPUT_BLOCK block_name",
        "body": [
            "OUTPUT_BLOCK ${block_name} &",
                "\t/ROW=numeric_expression &",
                "\t/COL=numeric_expression &",
                "\t/SOURCE=${source}",
            "${0}"
        ],
        "description": "Generate Output Block"        
    },    
    "OUTPUT_BLOCK ALL": {
        "prefix": "OUTPUT_BLOCK block_name [/qualifiers]",
        "body": [
            "OUTPUT_BLOCK ${block_name} &",
                "\t/ABSOLUTE_POSITION &",
                "\t/ATTRIBUTES=${attributes} & ! BLINK, BOLD, FORCE, NONE, REVERSE, UNDERLINE",
                "\t/BREAK=${break_int} &",
                "\t/COL=${col} &",
                "\t/DOMAIN=${domain_table} &",
                "\t/HEADING=${heading} &",
                "\t/HEIGHT=${height_num} &",
                "\t/LEN=${len} &",
                "\t/NOHEADING &",
                "\t/NOUNDERLINES &",
                "\t/OUTPUT_MASK=${output_mask} &",
                "\t/PDF(${pdf_options}=${value}) &",
                "\t/PROMPT=${prompt} &",
                "\t/ROW=${row}",
                "\t/SOURCE=${source} &",
                "\t/SOURCE_IF=${source_if} &",
                "\t/TARGET=${target} &",
                "\t/TOTAL &",
                "\t/USE_IF=(${use_if_condition}) &",
                "\t/USING=${usings}",
            "${0}"
                    ],
        "description": "Generate Pause Block"        
    },    
    "PAUSE_BLOCK": {
        "prefix": "PAUSE_BLOCK block_name",
        "body": [
            "PAUSE_BLOCK ${block_name}",              
            "${0}"
                
        ],
        "description": "Generate Pause Block"        
    },  
    "PAUSE_BLOCK ALL": {
        "prefix": "PAUSE_BLOCK block_name [/qualifiers]",
        "body": [
            "PAUSE_BLOCK ${block_name} &",              
                "\t/BACK=(${back_dml}) &",
                "\t/COL=${col_num} &",
                "\t/EXIT=(${exit_dml}) &",
                "\t/EXIT_FORWARD=(${exit_forward_dml}) &",
                "\t/PROMPT=${prompt} &",
                "\t/ROW=${row_num} &",
                "\t/USE_IF=(${use_if_condition})",
            "${0}"
                
        ],
        "description": "Generate Pause Block with ALL Qualifiers"        
    },  
    "SIGNATURE_BLOCK": {
        "prefix": "SIGNATURE_BLOCK",
        "body": [
            "SIGNATURE_BLOCK",              
            "${0}"
                
        ],
        "description": "Generate Signature Block"        
    },      
    "SIGNATURE_BLOCK ALL": {
        "prefix": "SIGNATURE_BLOCK [/qualifiers]",
        "body": [
            "SIGNATURE_BLOCK &",              
                "\t/AUDIT=${audit_file_spec} &",
                "\t/DATETIME=${datetime} &",
                "\t/FACILITY=${facility} &",
                "\t/FAILURE=(${failure}) &",
                "\t/NOAUDIT &",
                "\t/PASSWORD1=${password1} &",
                "\t/PASSWORD2=${password2} &",
                "\t/PURPOSE=${purpose} &",
                "\t/SUCCESS=(${success_dml}) &",
                "\t/USERNAME1=${username1} &",
                "\t/USERNAME2=${username2} &",
                "\t/USER1=${user_defined1} &",
                "\t/USER2=${user_defined2} &",
                "\t/USER3=${user_defined3} &",
                "\t/USER4=${user_defined4} &",
                "\t/USER5=${user_defined5} &",
                "\t/VALIDATION_FORM=${validation_form} &",
            "${0}"                        
        ],
        "description": "Generate YesNo Block with ALL Qualifiers"        
    },
    "YESNO_BLOCK": {
        "prefix": "YESNO_BLOCK block_name /ROW=row_num /COL=col_num",
        "body": [
            "YESNO_BLOCK ${block_name} /ROW=${row_num} /COL=${col}",                               
            "${0}"
                
        ],
        "description": "Generate YESNO Block"        
    },       
    "YESNO_BLOCK ALL": {
        "prefix": "YESNO_BLOCK block_name /[qualifiers]",
        "body": [
            "YESNO_BLOCK ${block_name} &",   
                "\t/BACK=(dml_statement) &",
                "\t/COL=${col} &",
                "\t/EXIT=(${exit_dml}) &",
                "\t/EXIT_FORWARD=(${exit_forward_dml}) &",
                "\t/FAILURE=(${failure}) &",
                "\t/HEADING=${heading} &",
                "\t/NOUNDERLINES &",
                "\t/PROMPT=${prompt} &",
                "\t/ROW=${row_num} &",
                "\t/SOURCE=${source} &",
                "\t/SOURCE_IF=${source_if} &",
                "\t/SUCCESS=(${success_dml}) &",
                "\t/TARGET=${target} &",
                "\t/USE_IF=(${use_if_condition})",                            
            "${0}"
                
        ],
        "description": "Generate YESNO Block with ALL Qualifiers"        
    },       
    
        
    
    // Statements    
    
    "ADD_TO": {
        "prefix": "ADD_TO table_or_var",
        "body": [
            "ADD_TO ${table_or_variable}",
            "${0}"
                
        ],
        "description": "ADD_TO table or variable"        
    },
    "ARCHIVE": {
        "prefix": "ARCHIVE[DBMS] [from/source]",
        "body": [
            "ARCHIVE[${DBMS}] [${from_source}] ${from_db_handle} [${to_target}] ${to_db_handle}",
            "${0}"                
        ],
        "description": "ARCHIVE [DBMS]"        
    },
    "BEGIN_CASE": {
        "prefix": "BEGIN_CASE / END_CASE",
        "body": [
            "BEGIN_CASE ($expression)\t",
            "\t",
            "\t${0}",
            "\t",
            "END_CASE"
                
        ],
        "description": "BEGIN_CASE"        
    },           

    "BEGIN_CASE_GEN": {
        "prefix": "BEGIN_CASE / CASE / CASE_ELSE / END_CASE (Generate)",
        "body": [
            "BEGIN_CASE (${begin_case_expression})\t",
            "\t",
            "\tCASE ${operator} ${case_expression}",
            "\t",
            "\tCASE ${expression_a} TO ${expression_b}",
            "\t",
            "\tCASE ELSE",
            "\t",
            "\t${0}",
            "\t",
            "END_CASE"
                
        ],
        "description": "Generate BEGIN_CASE / END_CASE block with CASE statements"        
    },           
    "BEGIN_DISABLE_TRIGGER": {
        "prefix": "BEGIN_DISABLE_TRIGGER",
        "body": [
            "BEGIN_DISABLE_TRIGGER",
            "${0}"             
                
        ],
        "description": "Disable update triggers"        
    },
    "BEGIN_SIGNAL_TO_STATUS": {
        "prefix": "BEGIN_SIGNAL_TO_STATUS",
        "body": [
            "BEGIN_SIGNAL_TO_STATUS",
            "${0}"                 
        ],
        "description": "Trap Error Signals"        
    },
    "CALL": {
        "prefix": "CALL routine_name [arguments]",
        "body": [
            "CALL ${routine_name} ${arguments}",
            "${0}" 
                
        ],
        "description": "Call Routine"        
    },
    "CALL_WEB_SERVICE": {
        "prefix": "CALL_WEB_SERVICE /ACTION=action /OPERATION=operation /PARAMETER=parameter /NAMESPACE=namespace /URL=url /RESPONSE=response /RESULT=result",
        "body": [
            "CALL_WEB_SERVICE &",
                "\t/ACTION=${action} &",
                "\t/OPERATION=${operation} &",
                "\t/PARAMETER=(NAME=${name}, TYPE=${type}, SOURCE=${source}, TARGET=${target}) &",
                "\t/NAMESPACE=${namespace} &",
                "\t/URL=${url} &",
                "\t/RESPONSE=${response} &",
                "\t/RESULT=(NAME=${r_name}, TYPE=${r_type}, TARGET=${r_target})",
            "${0}" 
                
        ],
        "description": "Call SOAP XML Web Service"        
    },
    "CD": {
        "prefix": "CD directory",
        "body": [
            "CD ${directory}",
            "${0}" 
                
        ],
        "description": "Set User Working Directory"        
    },
    "CHECK_DOMAIN_TARGET": {
        "prefix": "CHECK_DOMAIN [label_name] /TARGET=table_name(field_name) [/qualifiers]",
        "body": [
            "CHECK_DOMAIN ${label_name} /TARGET=${table}(${field}) &",
                "\t/DOMAIN=${domain_table} &",
                "\t/ERROR=${expression} &",
                "\t/FAILURE=(${failure_dml}) &",
                "\t/NEW &",
                "\t/NOCLEAR_BUFFER &",
                "\t/NOERROR &",
                "\t/OPTION=${options} & ! DOMAIN_LOCK_WRITE, DOMAIN_LOCK_NONE",
                "\t/PROTECT &",
                "\t/SOURCE=${source} &",
                "\t/SOURCE_IF=${source_if} &",
                "\t/SUCCESS=(${success_dml})",
            "${0}" 
                
        ],
        "description": "Domain Validation with TARGET"        
    },
   "CHECK_DOMAIN_USING": {
        "prefix": "CHECK_DOMAIN [label_name] /USING=table_name(field_name) [/qualifiers]",
        "body": [
            "CHECK_DOMAIN ${label_name} /TARGET=${table}(${field}) &",
                "\t/DOMAIN=${domain_table} &",
                "\t/ERROR=${expression} &",
                "\t/FAILURE=(${failure_dml}) &",
                "\t/NEW &",
                "\t/NOCLEAR_BUFFER &",
                "\t/NOERROR &",
                "\t/OPTION=${options} & ! DOMAIN_LOCK_WRITE, DOMAIN_LOCK_NONE",
                "\t/PROTECT &",
                "\t/SOURCE=${source} &",
                "\t/SOURCE_IF=${source_if} &",
                "\t/SUCCESS=(${success_dml})",
            "${0}" 
                
        ],
        "description": "Domain Validation with USING"        
    },
    "CLEAR_ARRAY": {
        "prefix": "CLEAR_ARRAY #array()",
        "body": [
            "CLEAR_ARRAY ${#array()}",
            "${0}" 
        ],
        "description": "Clears Array"        
    },
    "CLEAR_BUFFER_TABLE": {
        "prefix": "CLEAR_BUFFER table",
        "body": [
            "CLEAR_BUFFER ${table}",
            "${0}"             
                
        ],
        "description": "Clears Buffer (non-PID fields)"        
    },
    "CLEAR_BUFFER_DB_TABLE": {
        "prefix": "CLEAR_BUFFER database_handle.table",
        "body": [
            "CLEAR_BUFFER ${database_handle}.${table}",
            "${0}" 
                
        ],
        "description": "Clears Buffer (non-PID fields)"        
    },
    "CLEAR_BUFFER_VAR": {
        "prefix": "CLEAR_BUFFER database_handle.table",
        "body": [
            "CLEAR_BUFFER ${variable}",
            "${0}" 
                
        ],
        "description": "Clears Buffer (non-PID fields)"        
    },
    "CLI": {
        "prefix": "CLI command_expression",
        "body": [
            "CLI ${expression}",
            "${0}" 
                
        ],
        "description": "Command Language Interpreter"        
    },
   "CLI_ALL": {
        "prefix": "CLI command_expression /NOERASE /PAUSE",
        
        "body": [
            "CLI ${expression} /NOERASE /PAUSE",
            "${0}" 
                
        ],
        "description": "Command Language Interpreter"        
    },
   "CLOSE_TABS": {
        "prefix": "CLOSE_TABS",
        
        "body": [
            "CLOSE_TABS",
            "${0}" 
                
        ],
        "description": "Close Tabs and kill gem_ui_server processes"        
    },
   "CLOSE_TABS_ALL": {
        "prefix": "CLOSE_TABS /GEMBASE_ONLY /HTML_ONLY",
        
        "body": [
            "CLOSE_TABS /GEMBASE_ONLY /HTML_ONLY",
            "${0}"                 
        ],
        "description": "Close Tabs and kill gem_ui_server processes"        
    },
    "CLOSE_TEXT": {
        "prefix": "CLOSE_TEXT tag",
        
        "body": [
            "CLOSE_TEXT ${tag}",
            "${0}" 
                
        ],
        "description": "Close text file previously opened with OPEN_TEXT"        
    },
    "COMMIT": {
        "prefix": "COMMIT",
        
        "body": [
            "COMMIT",
            "${0}"             
                
        ],
        "description": "Commit to database"        
    },
    "COMPILE": {
        "prefix": "COMPILE [/qualifiers] \"input_file_spec\" [\"output_file_spec\"]",
        
        "body": [
            "COMPILE /CHECK /LIST /LOG=${log_file_name} \"${input_file_spec}\" \"${output_file_spec}\"",
            "${0}"                 
        ],
        "description": "Compile DML file"        
    },
    "CONTINUE": {
        "prefix": "CONTINUE",
        
        "body": [
            "COMPILE",
            "${0}" 
                
        ],
        "description": "Transfers program control to the end of the inner-most loop, continuing the loop."        
    },
    "CONTINUE_KEYWORD": {
        "prefix": "CONTINUE [keyword]",
        
        "body": [
            "COMPILE ${keyword} ! COMMIT, OUT, ROLLBAK",
            "${0}"                 
        ],
        "description": "Transfers program control to the end of the inner-most loop, continuing the loop."        
    },
    "DELETE FROM": {
        "prefix": "DELETE FROM [database_handle.]table_name",
        
        "body": [
            "DELETE FROM ${dataase}.${table} ! /ARCHIVE",
            "${0}"                 
        ],
        "description": "Delete buffer"        
    },
   "DELETE ALL FROM": {
        "prefix": "DELETE ALL FROM [database_handle.]table_name",
        
        "body": [
            "DELETE ALL FROM ${dataase}.${table} ! /ARCHIVE",
            "${0}"                          
        ],
        "description": "Transfers program control to the end of the inner-most loop, continuing the loop."        
    },
    "DELETE FROM VAR": {
        "prefix": "DELETE FROM #variable",
        
        "body": [
            "DELETE FROM ${variable} ! /ARCHIVE",
            "${0}"                 
        ],
        "description": "Delete buffer"        
    },
   "DELETE ALL FROM VAR": {
        "prefix": "DELETE ALL FROM #variable",
        
        "body": [
            "DELETE ALL FROM ${variable} ! /ARCHIVE",
            "${0}"                         
        ],
        "description": "Transfers program control to the end of the inner-most loop, continuing the loop."        
    },
   "DIR": {
        "prefix": "DIR file_spec",
        
        "body": [
            "DIR ${file_spec}",
            "${0}"              
        ],
        "description": "List files in a directory in TABLE_EDIT form"        
    },
   "DISPLAY": {
        "prefix": "DISPLAY keyword",
        
        "body": [
            "DISPLAY ${keyword} ! CLEAN, DEFAULTS, BEGIN_UPDATE, END_UPDATE, FLUSH, REFRESH",
            "${0}"                          
        ],
        "description": "Redisplay form"        
    },
   "END_DISABLE_TRIGGER": {
        "prefix": "END_DISABLE_TRIGGER",
        
        "body": [
            "END_DISABLE_TRIGGER",
            "${0}"                          
        ],
        "description": "Re-enable updates following BEGIN_DISABLE_TRIGGER"        
    },
   "END_EXECUTE": {
        "prefix": "END_EXECUTE [/CONNECT=connect_handle]",
        
        "body": [
            "END_EXECUTE /CONNECT=${handle}",
            "${0}"                          
        ],
        "description": "Abort stored procedure"        
    },
   "END_GTID": {
        "prefix": "END_GTID",
        
        "body": [
            "END_GTID",
            "${0}"             
        ],
        "description": "Decrements %GTID_LEVEL"        
    },
   "END_SIGNAL_TO_STATUS": {
        "prefix": "END_SIGNAL_TO_STATUS",
        
        "body": [
            "END_SIGNAL_TO_STATUS",
            "${0}"                     
        ],
        "description": "Stop trapping error signals"        
    },
   "END_WHILE": {
        "prefix": "END_WHILE",
        
        "body": [
            "END_WHILE",
            "${0}"       
        ],
        "description": "End While Loop"        
    },
   "ERROR": {
        "prefix": "ERROR error_text",
        
        "body": [
            "ERROR ${error_text}",
            "${0}"                        
        ],
        "description": "Error Text"        
    },
   "ERROR_ALL": {
        "prefix": "ERROR [/qualifiers] error_text",
        
        "body": [
            "ERROR /BELL /CONFIRM /NOBELL /NOWAIT /TEXT_ONLY /WAIT ${error_text}",
            "${0}"                          
        ],
        "description": "Error Text with all qualifiers"        
    },
   "EXECUTE": {
        "prefix": "EXECUTE procedure_name",
        
        "body": [
            "EXECUTE ${procedure_name}",
            "${0}"           
        ],
        "description": "Execute Procedure"        
    },
   "EXECUTE_ALL": {
        "prefix": "EXECUTE [/HANDLE=connect_handle] [/NOWAIT] procedure_name [(arguments)]",
        
        "body": [
            "EXECUTE /HANDLE=${handle} /NOWAIT ${procedure_name} ${(arguments)}",
            "${0}"                         
        ],
        "description": "Execute Procedure with Arguments and ALL Qualifiers"        
    },
   "EXIT": {
        "prefix": "EXIT",
        
        "body": [
            "EXIT",
            "${0}"                   
        ],
        "description": "Exit Current Form"        
    },
   "EXIT_status_success": {
        "prefix": "EXIT (%SUCCESS)",
        
        "body": [
            "EXIT (%SUCCESS)",
            "${0}"                       
        ],
        "description": "Exit Current Form with Success Status"        
    },
   "EXIT_status": {
        "prefix": "EXIT (%FAILURE)",
        
        "body": [
            "EXIT ($FAILURE)",
            "${0}"                          
        ],
        "description": "Exit Current Form Failure Status"        
    },
   "EXPORT": {
        "prefix": "EXPORT",
        
        "body": [
            "EXPORT",
            "${0}"                          
        ],
        "description": "EXPORT"        
    },
   "EXPORT_ALL": {
        "prefix": "EXPORT [Generate Qualifiers)",
        
        "body": [
            "EXPORT &",
                "\t/ARCHIVE=${archive_file_spec} &",
                "\t/ASCII &",
                "\t/BINARY &",
                "\t/CHARACTER_SET=${character_set} &",
                "\t/COMMIT_RATE=${commit_rate} &",
                "\t/CSV &",
                "\t/DATA &",
                "\t/FAILURE=(${failure_dml}) &",
                "\t/FROM=${from_db_handle} &",
                "\t/LOG=${log_file_spec} &",
                "\t/METADATA=${metadata_list} &",
                "\t/NOAUDIT &",
                "\t/NODATA &",
                "\t/NOLOG &",
                "\t/NOMETADATA &",
                "\t/NOSIGN &",
                "\t/NOSTATUS &",
                "\t/SIGN &",
                "\t/STATUS &",
                "\t/SUCCESS=(${success-dml}) &",
                "\t/TABLES=${tables} &",
                "\t/TO=${to_db_handle}",
            "${0}" 
                 
        ],
        "description": "Generate EXPORT with all Qualifers"        
    },
   "EXPORT_CSV": {
        "prefix": "EXPORT/CSV [Generate Qualifiers)",
        
        "body": [
            "EXPORT/CSV &",           
                "\t/ALWAYS_QUOTE &",
                "\t/CHARACTER_SET=${character_set} &",
                "\t/DOUBLE_QUOTE &",
                "\t/ESCAPE_CHARACTER=${escape_char} &",
                "\t/FAILURE=(${failure_dml}) &",
                "\t/FIELD_SEPARATOR=${field_separator} &",
                "\t/FIELDS=${field_list} &",
                "\t/FROM=${db_handle}.${table} &",
                "\t/LOG=${log_file_spec} &",
                "\t/METADATA=${metadata_list} &",
                "\t/QUOTE_CHARACTER=${quote_character} &",
                "\t/STATUS &",
                "\t/SUCCESS=(${success-dml}) &",
                "\t/TO=${CSV-file-spec} &",
                "\t/VERBOSE &",
            "${0}" 
                
        ],
        "description": "Generate EXPORT/CSV with all Qualifers"        
    },
   "EXPORT_XML": {
        "prefix": "EXPORT/XML [Generate Qualifiers)",
        
        "body": [
            "EXPORT/XML &",           
                "\t/FROM=${db_handle}.${table} &",
                "\t/TABLE=${table} &",
                "\t/TARGET=${target}",
            "${0}" 
                
        ],
        "description": "Generate EXPORT/XML with all Qualifers"        
    },
    "EXPORT_XML_ALL": {
        "prefix": "EXTERNAL \"file_spec\" routine_name [func_return_value_keywords] [arguments] /FAILURE=(failure_dml) /SUCCESS=(sucess_dml)",
        
        "body": [
            "EXTERNAL \"${file_spec}\" ${routine} ${keyword} ${arguments} &",
                "\t/FAILURE=(${failure_dml}) &",
                "\t/SUCCESS=(${success_dml})",           
            "${0}" 
                
        ],
        "description": "Declares External Routine"        
    },
    "EXTERNAL": {
        "prefix": "EXTERNAL \"file_spec\" routine_name [func_return_value_keywords] [arguments] /FAILURE=(failure_dml) /SUCCESS=(sucess_dml)",
        
        "body": [
            "EXTERNAL \"${file_spec}\" ${routine} ${keyword} ${arguments} &",
                "\t/FAILURE=(${failure_dml}) &",
                "\t/SUCCESS=(${success_dml})",           
            "${0}" 
                
        ],
        "description": "Declares External Routine"        
    },
    "FETCH": {
        "prefix": "FETCH stream_name",
        
        "body": [
            "FETCH stream_name",
            "${0}"                 
        ],
        "description": "Get next record from stream"        
    },
    "FETCH_ALL": {
        "prefix": "FETCH stream_name /FAILURE=(failure_dml) /SUCCESS=(success_dml)",
        
        "body": [
            "FETCH ${stream_name} /FAILURE=(${failure_dml}) /SUCCESS=($success_dml)",
            "${0}"                 
        ],
        "description": "Get next record from stream"        
    },
    "FIND IN": {
        "prefix": "FIND IN table_name /[qualifiers]",
        
        "body": [
            "FIND IN ${tablename}",
                "\t/LOCK=${lock_type} & ! NONE, READ, WRITE &",
                "\t/SECONDARY &",
                "\t/STREAM_NAME=${stream_name} &",
                "\t/WITH=${with_field_expression}",
            "${0}" 
                
        ],
        "description": "Find records in table"        
    },
    "GOTO": {
        "prefix": "GOTO block_name",
        
        "body": [
            "GOTO ${block_name}",
            "${0}"                 
        ],
        "description": "Goes to block"        
    },
    "IF": {
        "prefix": "IF (condition)",
        
        "body": [
            "IF ${condition}",
            "\t",
            "\t{0}",
            "\t",
            "END_IF"
                
        ],
        "description": "If Statement"        
    },
    "ELSE": {
        "prefix": "ELSE",
        
        "body": [
            "ELSE",
            "\t{0}"
                
        ],
        "description": "ELSE"        
    },
    "ELSE_IF": {
        "prefix": "ELSE_IF (condition)",
        
        "body": [
            "ELSE_IF (${condition})",
            "\t{0}"
                
        ],
        "description": "ELSE_IF"        
    },
    "END_IF": {
        "prefix": "END_IF",
        
        "body": [
            "END_IF",
            "${0}"             
                
        ],
        "description": "END_IF"        
    },
    "IMPORT": {
        "prefix": "IMPORT [/qualifiers]",
        
        "body": [
            "IMPORT &",
                "\t/ARCHIVE=${archive_file_spec} &",
                "\t/CHECK_ONLY &",
                "\t/COMMIT_RATE=${commit_rate} &",
                "\t/CSV &",
                "\t/DATA &",
                "\t/FAILURE=(${failure_dml}) &",
                "\t/FROM=${from_db_handle} &",
                "\t/LOG=${log_file_spec} &",
                "\t/METADATA=${metadata_list} &",
                "\t/METADATA_DUMP=${metadata_dump} &",
                "\t/NOAUDIT &",
                "\t/NOCHECK_ONLY &",
                "\t/NODATA &",
                "\t/NOLOG &",
                "\t/NOMETADATA &",
                "\t/NOSTATUS &",
                "\t/STATUS &",
                "\t/SUCCESS=(${success-dml}) &",
                "\t/TABLES=\"${tables}\" &",
                "\t/TO=${to_db_handle}",
                "\t/VERBOSE",
            "${0}"                 
        ],
        "description": "IMPORT data to a database"        
    },
    "IMPORT_CSV": {
        "prefix": "IMPORT/CSV [/qualifiers]",
        
        "body": [
            "IMPORT/CSV &",
                "\t/CHARACTER_SET=${character_set} &",
                "\t/DOUBLE_QUOTE &",
                "\t/ESCAPE_CHARACTER=${escape_char} &",
                "\t/FAILURE=(dml-statement) &",
                "\t/FIELD_SEPARATOR=field-separator &",
                "\t/FIELDS=field-list &",
                "\t/FROM=CSV-file-specification &",
                "\t/LOG=log-file-specification &",
                "\t/METADATA=metadata-list &",
                "\t/QUOTE_CHARACTER=quote-character &",
                "\t/STATUS &",
                "\t/SUCCESS=(dml-statement) &",
                "\t/TO= database-handle.table-name &",
                "\t/VERBOSE",
            "${0}"                 
        ],
        "description": "Import CSV into table"        
    },
    "IMPORT_XML": {
        "prefix": "IMPORT/XML [/qualifiers]",
        
        "body": [
            "IMPORT/XML &",
                "\t/CREATE &",
                "\t/CREATE_IF &",
                "\t/ERROR_TEXT=${error_text} &",
                "\t/REPLACE &",
                "\t/RESULTNAME=${resultname} &",
                "\t/SOURCE=${source} &",
                "\t/TABLE=${table}",
            "${0}" 

                
        ],
        "description": "IMPORT XML into table"        
    },
    "LOAD": {
        "prefix": "LOAD file_spec INTO table(field)",
        "body": [
            "LOAD ${file_spec} INTO ${table}(${field})",
            "${0}"               
        ],
        "description": "Load TXT file into field"        
    },
    "MAIL": {
        "prefix": "MAIL /TO=to_address /SUBJECT=subject /TEXT=text [/FILE=$FILE_SPEC]",
        "body": [
            "MAIL /TO=${to_address} /SUBJECT=${subject} /TEXT={$text} /FILE=${file_spec}",
            "${0}"              
        ],
        "description": "Load TXT file into field"        
    },
    "MAIL/SMTP": {
        "prefix": "MAIL/SMTP [/qualifiers]",
        "body": [
            "MAIL/SMTP &",
            "\t/Attachments=${csv_file_spec_list} &",
            "\t/Bcc=${bcc_csv_emails} &",
            "\t/Cc=${cc_csv_emails} &",
            "\t/Domain=${smtp_auth_domain} &",
            "\t/Error_Code=${gembase_smtp_error_code} &",
            "\t/Error_Text=${gembase_smtp_error_text} &",
            "\t/File=${msg_body_filename} &",
            "\t/From=${from_email} &",
            "\t/Header=${custom_header} &",
            "\t/Importance=${importance} &",
            "\t/Notify=${delivery_status_notification_keywords} &",
            "\t/Options=${options} &",
            "\t/Password=${smtp_auth_password} &",
            "\t/Port=${smtp_server_port} &",
            "\t/Reply_To=${reply_to_email} &",
            "\t/Response_Code=${smtp_server_response_code} &",
            "\t/Response_Text=${smtp_server_response_text} &",
            "\t/Sender=${sender_email} &",
            "\t/Sensitivity=${sensitivity_level} &",
            "\t/Server=${smtp_server_hostname} &",
            "\t/Subject=${subject} &",
            "\t/Text=${message_body} &",
            "\t/Timeout=${smtp_server_timeout} &",
            "\t/To=${to_csv_emails} &",
            "\t/Username=${smtp_auth_username}",
            "${0}" 
              
        ],
        "description": "Send email via SMTP"        
    },
    "MESSAGE": {
        "prefix": "MESSAGE [/qualifiers] message_name",
        "body": [
            "MESSAGE /BELL/CONFIRM/FACILITY/IDENTIFIER/SEVERITY/WAIT ${message_name}",
            "${0}"             
              
        ],
        "description": "Display message at bottom of display window"
    },
    "OPEN_TAB": {
        "prefix": "OPEN_TAB [/qualifiers]",
        "body": [
            "OPEN_TAB [/URL=[StringExpression] &",
                "\t/WEB_APP=${web_app} &",
                "\t/FACILITY=${facility} &",
                "\t/PERFORM=${perform} &",
                "\t/DESC=${desc} &",
                "\t/NEW_WINDOW",
            "${0}" 
              
        ],
        "description": "Open a tab"
    },
    "OPEN_TEXT": {
        "prefix": "OPEN_TEXT [/APPEND|/CREATE/PDF] filename AS tag",
        "body": [
            "OPEN_TEXT ${filename} AS ${tag} &",
                "\t/APPEND &",
                "\t/CREATE &",
                "\t/PDF &",
                "\t/CHARACTER_SET=${character_set}"   ,
            "${0}"                 
              
        ],
        "description": "Open text file"
    },
    "OPEN_URL": {
        "prefix": "OPEN_URL /URL=url {/DESC=stringexpression|/NEW_WINDOW}",
        "body": [
            "OPEN_URL /URL=${url} /DESC=${desc} /NEW_WINDOW",   
            "${0}"               
        ],
        "description": "Open URL"
    },
    "PERFORM": {
        "prefix": "PERFORM procedure_name",
        "body": [
            "PERFORM ${PROCEDURE_NAME}",
            "${0}"             
        ],
        "description": "Perform Procedure"
    },
    "PRINT": {
        "prefix": "PRINT expression",
        "body": [
            "PRINT ${expression}",
            "${0}"             
        ],
        "description": "Print message at bottom of display"
    },
    "PRINT_ALL": {
        "prefix": "PRINT [/qualifiers] expression",
        "body": [
            "PRINT /BELL/CONFIRM/NOBELL/NOWAIT/WAIT ${expression}",
            "${0}"             
        ],
        "description": "Print message at bottom of display"
    },
    "RANDOMIZE": {
        "prefix": "RANDOMIZE",
        "body": [
            "RANDOMIZE",
            "${0}"             
        ],
        "description": "Seed the random number generator"
    },
    "READ_LINE": {
        "prefix": "READ_LINE tag [/TARGET=target_spec]",
        "body": [
            "READ_LINE ${tag} /TARGET=$target_spec",
            "${0}"             
        ],
        "description": "Read record from text file"
    },
    "RECEIVE_DATA": {
        "prefix": "RECEIVE_DATA [/HANDLE=connect_handle] writable_data_elements",
        "body": [
            "RECEIVE_DATA /HANDLE=${handle} ${writable_data_elements}",
            "${0}"             
        ],
        "description": "Read row data from stored procedure"
    },
    "RECEIVE_TABLE": {
        "prefix": "RECEIVE_TABLE [/qualifiers] target_table [FROM source_table]",
        "body": [
            "RECEIVE_TABLE target_table_name &",
                "\tFROM ${source_table_name} &",
                "\tHANDLE=${handle}",
                "\t!/REPLACE ! truncate target table before loading data",
            "${0}"                 
        ],
        "description": "Receive table from database"
    },
    "REPOSITION BY": {
        "prefix": "REPOSITION BY [-]n",
        "body": [
            "REPOSITION BY ${n}",
            "${0}"             
        ],
        "description": "Increae or decrease report form's current line count"
    },
    "REPOSITION TO": {
        "prefix": "REPOSITION TO n",
        "body": [
            "REPOSITION TO ${n}",
            "${0}"             
        ],
        "description": "Move report form's output position"
    },
    "REWIND_TEXT": {
        "prefix": "REWIND_TEXT tag",
        "body": [
            "REWIND_TEXT ${tag}",
            "${0}"             
        ],
        "description": "Move to beginning of file"
    },
    "ROLLBACK": {
        "prefix": "ROLLBACK",
        "body": [
            "ROLLBACK",
            "${0}"
        ],
        "description": "Rollback transaction"
    },
    "SEND_DATA": {
        "prefix": "SEND_DATA data_elements",
        "body": [
            "SEND_DATA ${data_elements}",
            "${0}"
        ],
        "description": "Send data from stored procedure"
    },
    "SEND_MESSAGE": {
        "prefix": "SEND_MESSAGE numeric_expression, text_expression",
        "body": [
            "SEND_MESSAGE ${numeric}, ${text}",
            "${0}"
        ],
        "description": "Send message from stored procedure"
    },
    "SEND_TABLE": {
        "prefix": "SEND_TABLE [/HANDLE=connect_handle][/REPLACE] source_table_name [TO target_table_name]",
        "body": [
            "SEND_TABLE source_table_name [TO target_table_name]",
                "\t/HANDLE=${handle}",
                "! /REPLACE",
            "${0}"
        ],
        "description": "Send table to database"
    },
    "SIGNATURE": {
        "prefix": "SIGNATURE [/qualifiers]",
        "body": [
            "SIGNATURE &",
                "\t/AUDIT=audit-file-specification &",
                "\t/DATETIME=${datetime} &",
                "\t/FACILITY=${facility} &",
                "\t/FAILURE=(${failure_dml}) &",
                "\t/NOAUDIT &",
                "\t/PASSWORD1=${password1} &",
                "\t/PASSWORD2=${password2} &",
                "\t/PURPOSE=${purpose} &",
                "\t/SAVE &",
                "\t/SUCCESS=(${success-dml}) &",
                "\t/RECALL &",
                "\t/USERNAME1=${username1} &",
                "\t/USERNAME2=${username2} &",
                "\t/USER1=${user_defined1} &",
                "\t/USER2=${user_defined2} &",
                "\t/USER3=${user_defined3} &",
                "\t/USER4=${user_defined4} &",
                "\t/USER5=${user_defined5} &",
                "\t/VALIDATION_FORM=${validation_form}",
            "${0}"

        ],
        "description": "Signature Statemente"
    },
    "SLEEP": {
        "prefix": "SLEEP seconds",
        "body": [
            "SLEEP ${seconds}",
            "${0}"
        ],
        "description": "Sleep for specified number of seconds"
    },
    "START_DATA_ZONE": {
        "prefix": "START_DATA_ZONE",
        "body": [
            "START_DATA_ZONE",
            "${0}"
        ],
        "description": "START_DATA_ZONE"
    },
    "START_GTID": {
        "prefix": "START_GTID",
        "body": [
            "START_GTID",
            "${0}"
        ],
        "description": "START_GTID"
    },
    "START_STREAM": {
        "prefix": "START_STREAM stream_name /TABLE=table [/qualifiers]",
        "body": [
            "START_STREAM ${stream} /TABLE=${table} &",
                "\t/COMMIT_RATE=${commit_rate} &",
                "\t/FIRST=${max_records} &",
                "\t/GROUPED_BY=${grouped_by} &",
                "\t ! or",
                "\t/GROUPED_BY=${grouped_by} &",
                "\t/JOINED_TO=${joined_to} &",
                "\t/LOCK=${lock_type} & ! NONE, READ, WRITE &",
                "\t/REDUCED_TO=${reduced_to} &",
                "\t ! or &",
                "\t/REDUCED_TO=${reduced_to} &",
                "\t/SECONDARY &",
                "\t/SELECTION=expression &",
                "\t/SORTED_BY=([-]field_name[,...]) &",
                "\t ! or &",
                "\t/SORTED_BY=${sorted_by} &",
                "\t ! or &",
                "\t/SORTED_BY=${sorted_by} &",
                "\t/STATISTIC=${variable}=${statistic_function} &",
                "\t/TABLE=${table} &",
                "\t ! or &",
                "\t/TABLE=${table} &",
                "\t/WITH=${with_field_expression}",
                "\t ! or &",
                "\t/WITH=${with_field_expression}",
            "${0}"

        ],
        "description": "START_STREAM"
    },
    "START_TRANSACTION": {
        "prefix": "START_TRANSACTION",
        "body": [
            "START_TRANSACTION",
            "${0}"
        ],
        "description": "Starts read/write transaction"
    },    
    "START_TRANSACTION READ_ONLY": {
        "prefix": "START_TRANSACTION READ_ONLY",
        "body": [
            "START_TRANSACTION READ_ONLY",
            "${0}"
        ],
        "description": "Starts read transaction"
    },    
    "SWITCH": {
        "prefix": "SWITCH form_name",
        "body": [
            "SWITCH ${form}",
            "${0}"
        ],
        "description": "Exit current form and execute form"
    },   
    "SWITCH_FILE_SPEC": {
        "prefix": "SWITCH \"form_file_spec\" [form_name] [(arguments)]",
        "body": [
            "SWITCH “${form_file_spec}” ${form} (${arguments})",
            "${0}"
        ],
        "description": "Exit current form by calling DMC or DML and execute form"
    },   
    "SWITCH_BASE": {
        "prefix": "SWITCH_BASE form_name",
        "body": [
            "SWITCH_BASE ${form}",
            "${0}"
        ],
        "description": "Automatically exit current form and execute form"
    },   
    "SWITCH_BASE_SPEC": {
        "prefix": "SWITCH_BASE \"form_file_spec\" [form_name] [(arguments)]",
        "body": [
            "SWITCH_BASE “${form_file_spec}” ${form} (${arguments})",
            "${0}"
        ],
        "description": "AUtomatically exit current form by calling DMC or DML and execute form"
    },  
    "SWITCH_BASE_EXIT": {
        "prefix": "SWITCH_BASE %EXIT",
        "body": [
            "SWITCH_BASE %EXIT",
            "${0}"
        ],
        "description": "Exit form which contains /BASE qualifier"
    },   
    "TABLE_SEARCH": {
        "prefix": "TABLE_SEARCH table_name(fields) [/qualifiers]",
        "body": [
            "TABLE_SEARCH ${table}(${fields}) &",
                "\t/BACK=(${dml_back}) &",
                "\t/COL=${col_num} &",
                "\t/ERROR=${error} &",
                "\t/EXIT=(${dml_exit}) &",
                "\t/FIRST=${max_records} &",
                "\t/HEIGHT=${height_num} &",
                "\t/NOERROR &",
                "\t/REDUCED_TO=${reduced_to} &",
                "\t ! or &",
                "\t/REDUCED_TO=${reduced_to} &",
                "\t ! or &",
                "\t/REDUCED_TO=${reduced_to} &",
                "\t/ROW=${row_num} &",
                "\t/SELECTION=${selection} &",
                "\t ! or &",
                "\t/SELECTION=${selection_all_or_any} & ! ALL or ANY",
                "\t/SELECT_ONE &",
                "\t/SORTED_BY=(${sorted_by}) &",
                "\t ! or &",
                "\t/SORTED_BY=(${sorted_by}) &",
                "\t ! or &",
                "\t/SORTED_BY=${sorted_by} &",
                "\t/WITH=${with_field_expression}",
            "${0}"
            
            
        ],
        "description": "Display data from table/fields in an LOV window"
    },   
    "TRANSFER": {
        "prefix": "TRANSFER command_filename [/qualifiers]",
        "body": [
            "TRANSFER ${command_filename} &",
                "\t/POSITION=${position} &",
                "\t/LENGTH=${length} &",
                "\t/SCALE=${scale} &",
            "${0}"
        ],
        "description": "Transfer file into database"
    },  
    "WHILE": {
        "prefix": "WHILE (condition)",
        "body": [
            "WHILE (${condition})",
            "\t",
            "\t{0}",
            "\t",
            "END_WHILE"
        ],
        "description": "While loop"
    },  
    "WRITE": {
        "prefix": "WRITE tag data",
        "body": [
            "WRITE ${tag} ${data}",
            "${0}"
        ],
        "description": "Write data into buffer"
    },  
    "WRITE_LINE": {
        "prefix": "WRITE_LINE tag [data]",
        "body": [
            "WRITE_LINE ${tag} ${data}",
            "${0}"
        ],
        "description": "Write record into buffer"
    },  
    "XML_RECEIVE_TABLES": {
        "prefix": "XML_RECEIVE_TABLES [/ERROR_TEXT=error-text]",
        "body": [
            "XML_RECEIVE_TABLES /ERROR_TEXT=${error_text}",
            "${0}"
        ],
        "description": "Receive XML tables"
    },  
    "XML_SEND_TABLE": {
        "prefix": "XML_SEND_TABLE table-name [/TABLE_OPTIONS=table-options] [/FIELD_OPTIONS=field-options]",
        "body": [
            "XML_SEND_TABLE ${table} /TABLE_OPTIONS=${table_options} /FIELD_OPTIONS=${field_options}",
            "${0}"
        ],
        "description": "Send XML tables"
    },  
    "$": {
        "prefix": "$ command",
        "body": [
            "$ ${command}",
            "${0}"
        ],
        "description": "Operating System Command"
    },  

  


// String Functions

// TODO: need to add function descriptions


    "AMONG": {
        "prefix": "AMONG(value, range-list-1 [, range-list-2…range-list-254)",
        "body": [
            "AMONG(${value}, ${range_list})"
        ],
        "description": ""
    },
    "ASCII": {
        "prefix": "ASCII(source_character)",
        "body": [
            "ASCII(${character})"
        ],
        "description": ""
    },
    "BASE64_DECODE": {
        "prefix": "BASE64_DECODE(source_string)",
        "body": [
            "BASE64_DECODE(${string})"
        ],
        "description": ""
    },
    "BASE64_ENCODE": {
        "prefix": "BASE64_ENCODE(source_string)",
        "body": [
            "BASE64_ENCODE(${string})"
        ],
        "description": ""
    },
    "CHR": {
        "prefix": "CHR(numeric_value)",
        "body": [
            "CHR(${number})"
        ],
        "description": ""
    },
    "COMPRESS": {
        "prefix": "COMPRESS(source_string)",
        "body": [
            "COMPRESS(${string})"
        ],
        "description": ""
    },
    "COMPRESS_ALL": {
        "prefix": "COMPRESS_ALL (source_string)",
        "body": [
            "COMPRESS_ALL (${string})"
        ],
        "description": ""
    },
    "CSV_MERGE": {
        "prefix": "CSV_MERGE(#array() [,count] [, options] [, comma] [, quote] [, escape])",
        "body": [
            "CSV_MERGE(${#array()}, count, options, comma, quote, escape)"
        ],
        "description": ""
    },
    "CSV_MERGE_2": {
        "prefix": "CSV_MERGE(#array())",
        "body": [
            "CSV_MERGE(${#array()})"
        ],
        "description": ""
    },
    "DATA_COMPRESS": {
        "prefix": "DATA_COMPRESS(input-string)",
        "body": [
            "DATA_COMPRESS(${string})"
        ],
        "description": ""
    },
    "DATA_UNCOMPRESS": {
        "prefix": "DATA_UNCOMPRESS(input-string)",
        "body": [
            "DATA_UNCOMPRESS(${string})"
        ],
        "description": ""
    },
    "ELEMENT": {
        "prefix": "ELEMENT(element-number, source-string [, delimiter-string])",
        "body": [
            "ELEMENT(${number}, ${string}, ${delimiter})"
        ],
        "description": ""
    },
    "ELEMENT_2": {
        "prefix": "ELEMENT(element-number, source-string)",
        "body": [
            "ELEMENT(${number}, ${string})"
        ],
        "description": ""
    },
    "EXPAND": {
        "prefix": "EXPAND(source_string)",
        "body": [
            "EXPAND(${string})"
        ],
        "description": ""
    },
    "IS_TRUE": {
        "prefix": "IS_TRUE(input-string)",
        "body": [
            "IS_TRUE(${string})"
        ],
        "description": ""
    },
    "LEFT": {
        "prefix": "LEFT(source_string,end_position)",
        "body": [
            "LEFT(${string},${end_pos})"
        ],
        "description": ""
    },
    "LEN": {
        "prefix": "LEN(source_string)",
        "body": [
            "LEN(${string})"
        ],
        "description": ""
    },
    "LOWERCASE": {
        "prefix": "LOWERCASE(source_string)",
        "body": [
            "LOWERCASE(${string})"
        ],
        "description": ""
    },
    "LPAD": {
        "prefix": "LPAD(input-string, length [,pad-character])",
        "body": [
            "LPAD(${string}, ${length} ,${pad_char})"
        ],
        "description": ""
    },
    "LPAD_2": {
        "prefix": "LPAD(input-string, length)",
        "body": [
            "LPAD(${string}, ${length}"
        ],
        "description": ""
    },
    "LTRIM": {
        "prefix": "LTRIM(source_string)",
        "body": [
            "LTRIM(${string})"
        ],
        "description": ""
    },
    "MATCHING": {
        "prefix": "MATCHING(candidate-string, pattern-string)",
        "body": [
            "MATCHING(${candidate-string}, ${pattern-string})"
        ],
        "description": ""
    },
    "MERGE": {
        "prefix": "MERGE(#array() [,count])",
        "body": [
            "MERGE(${#array()}, ${count})"
        ],
        "description": ""
    },
    "MERGE_2": {
        "prefix": "MERGE(#array())",
        "body": [
            "MERGE(${#array()})"
        ],
        "description": ""
    },
    "MID": {
        "prefix": "MID(source_string,start_position,length)",
        "body": [
            "MID(#{string},${start_pos},${length})"
        ],
        "description": ""
    },
    "POS": {
        "prefix": "POS(source_string,substring,start_position)",
        "body": [
            "POS(${string},${substring},${start_pos})"
        ],
        "description": ""
    },
    "QUOTE": {
        "prefix": "QUOTE(input-string)",
        "body": [
            "QUOTE(${string})"
        ],
        "description": ""
    },
    "RANGE_MERGE": {
        "prefix": "RANGE_MERGE(#from_array(), #to_array() [,count])",
        "body": [
            "RANGE_MERGE(${#from_array()}, ${#to_array()}, ${count})"
        ],
        "description": ""
    },
    "RANGE_MERGE_2": {
        "prefix": "RANGE_MERGE(#from_array(), #to_array())",
        "body": [
            "RANGE_MERGE(${#from_array()}, ${#to_array()})"
        ],
        "description": ""
    },
    "REPLACE": {
        "prefix": "REPLACE(source-string, starting-position, ending-position, replacement-string)",
        "body": [
            "REPLACE(${source_string}, ${start_pos}, ${end_pos}, ${replacement_string})"
        ],
        "description": ""
    },
    "RIGHT": {
        "prefix": "RIGHT(source_string,start_position)",
        "body": [
            "RIGHT(${string},${start_pos})"
        ],
        "description": ""
    },
    "RMD160": {
        "prefix": "RMD160(input-string)",
        "body": [
            "RMD160(${string})"
        ],
        "description": ""
    },
    "RPAD": {
        "prefix": "RPAD(input-string, length [,pad-character])",
        "body": [
            "RPAD(${string}, ${length}, ${pad_char})"
        ],
        "description": ""
    },
    "RTRIM": {
        "prefix": "RTRIM(input-string)",
        "body": [
            "RTRIM(${string})"
        ],
        "description": ""
    },
    "SCRAMBLE": {
        "prefix": "SCRAMBLE(input-string)",
        "body": [
            "SCRAMBLE(${string})"
        ],
        "description": ""
    },
    "SEG": {
        "prefix": "SEG(input-string, starting-position, ending-positon)",
        "body": [
            "SEG(${string}, ${start_pos}, ${end_pos})"
        ],
        "description": ""
    },
    "STARTING_WITH": {
        "prefix": "STARTING_WITH(source-string, sub-string)",
        "body": [
            "STARTING_WITH(${source_string}, ${sub_string})"
        ],
        "description": ""
    },
    "STRING": {
        "prefix": "STRING(duplication_count,ascii_character_value)",
        "body": [
            "STRING(duplication_count,ascii_character_value)"
        ],
        "description": ""
    },
    "TRANSLATE": {
        "prefix": "TRANSLATE(source_string, source_character_set_name, target_character_set_name)",
        "body": [
            "TRANSLATE(${source_string}, ${source_char_set_name}, ${target_char_set_name})"
        ],
        "description": ""
    },
    "TRIM": {
        "prefix": "TRIM(source_string)",
        "body": [
            "TRIM(${string})"
        ],
        "description": ""
    },
    "UNQUOTE": {
        "prefix": "UNQUOTE(input-string)",
        "body": [
            "UNQUOTE(${string})"
        ],
        "description": ""
    },
    "UNSCRAMBLE": {
        "prefix": "UNSCRAMBLE(input-string)",
        "body": [
            "UNSCRAMBLE(${string})"
        ],
        "description": ""
    },
    "UPPERCASE": {
        "prefix": "UPPERCASE(source_string)",
        "body": [
            "UPPERCASE(${string})"
        ],
        "description": ""
    },
    
    // Numeric Functions
    
    "ABS": {
        "prefix": "ABS()",
        "body": [
            "ABS(${value})"
        ],
        "description": "Returns the absolute value"
    },
    "ACOS": {
        "prefix": "ACOS(cosine)",
        "body": [
            "ACOS(${cosine})"
        ],
        "description": ""
    },
    "ACOSD": {
        "prefix": "ACOSD(value)",
        "body": [
            "ACOSD(${value})"
        ],
        "description": ""
    },
    "ACOSH": {
        "prefix": "ACOSH(value)",
        "body": [
            "ACOSH(${value})"
        ],
        "description": ""
    },
    "ACOT": {
        "prefix": "ACOT(value)",
        "body": [
            "ACOT(${value})"
        ],
        "description": ""
    },
    "ACOTD": {
        "prefix": "ACOTD(value)",
        "body": [
            "ACOTD(${value})"
        ],
        "description": ""
    },
    "ACOTH": {
        "prefix": "ACOTH(value)",
        "body": [
            "ACOTH(${value})"
        ],
        "description": ""
    },
    "ACSC": {
        "prefix": "ACSC(value)",
        "body": [
            "ACSC(${value})"
        ],
        "description": ""
    },
    "ACSCD": {
        "prefix": "ACSCD(value)",
        "body": [
            "ACSCD(${value})"
        ],
        "description": ""
    },
    "ACSCH": {
        "prefix": "ACSCH(value)",
        "body": [
            "ACSCH(${value})"
        ],
        "description": ""
    },
    "ASEC": {
        "prefix": "ASEC(value)",
        "body": [
            "ASEC(${value})"
        ],
        "description": ""
    },
    "ASECH": {
        "prefix": "ASECH(value)",
        "body": [
            "ASECH(${value})"
        ],
        "description": ""
    },
    "ASIND": {
        "prefix": "ASIND(value)",
        "body": [
            "ASIND(${value})"
        ],
        "description": ""
    },
    "ASINH": {
        "prefix": "ASINH(value)",
        "body": [
            "ASINH(${value})"
        ],
        "description": ""
    },
    "ATAND": {
        "prefix": "ATAND(value)",
        "body": [
            "ATAND(${value})"
        ],
        "description": ""
    },
    "ATAND2": {
        "prefix": "ATAND2(value)",
        "body": [
            "ATAND2(${value})"
        ],
        "description": ""
    },
    "ATANH": {
        "prefix": "ATANH(value)",
        "body": [
            "ATANH(${value})"
        ],
        "description": ""
    },
    "ASIN": {
        "prefix": "ASIN(sine)",
        "body": [
            "ASIN(${sine})"
        ],
        "description": ""
    },
    "ATAN": {
        "prefix": "ATAN(tangent)",
        "body": [
            "ATAN(${tangent})"
        ],
        "description": ""
    },
    "ATAN2": {
        "prefix": "ATAN2(sine,cosine)",
        "body": [
            "ATAN2(${sine},${cosine})"
        ],
        "description": ""
    },
    "BINARY_TO_POLY": {
        "prefix": "BINARY_TO_POLY(binary_string,format)",
        "body": [
            "BINARY_TO_POLY(${binary_string},${format})"
        ],
        "description": ""
    },
    "CEIL": {
        "prefix": "CEIL(number)",
        "body": [
            "CEIL(${number})"
        ],
        "description": ""
    },
    "COS": {
        "prefix": "COS(angle)",
        "body": [
            "COS(${angle})"
        ],
        "description": ""
    },
    "COSD": {
        "prefix": "COSD(value)",
        "body": [
            "COSD(${value})"
        ],
        "description": ""
    },
    "COSH": {
        "prefix": "COSH(value)",
        "body": [
            "COSH(${value})"
        ],
        "description": ""
    },
    "COT": {
        "prefix": "COT(value)",
        "body": [
            "COT(${value)}"
        ],
        "description": ""
    },
    "COTD": {
        "prefix": "COTD(value)",
        "body": [
            "COTD(${value})"
        ],
        "description": ""
    },
    "COTH": {
        "prefix": "COTH(value)",
        "body": [
            "COTH(${value})"
        ],
        "description": ""
    },
    "CSC": {
        "prefix": "CSC(value)",
        "body": [
            "CSC(${value})"
        ],
        "description": ""
    },
    "CSCD": {
        "prefix": "CSCD(value)",
        "body": [
            "CSCD(${value})"
        ],
        "description": ""
    },
    "CSCH": {
        "prefix": "CSCH(value)",
        "body": [
            "CSCH(${value})"
        ],
        "description": ""
    },
    "DEG": {
        "prefix": "DEG(value)",
        "body": [
            "DEG(${value})"
        ],
        "description": ""
    },
    "EXP": {
        "prefix": "EXP(value)",
        "body": [
            "EXP(${value})"
        ],
        "description": ""
    },
    "EXP2": {
        "prefix": "EXP2(value)",
        "body": [
            "EXP2(${value})"
        ],
        "description": ""
    },
    "EXP10": {
        "prefix": "EXP10(value)",
        "body": [
            "EXP10(${value})"
        ],
        "description": ""
    },
    "FAC": {
        "prefix": "FAC(value)",
        "body": [
            "FAC(${value})"
        ],
        "description": ""
    },
    "FIX": {
        "prefix": "FIX(value)",
        "body": [
            "FIX(${value})"
        ],
        "description": ""
    },
    "FRAC": {
        "prefix": "FRAC(value)",
        "body": [
            "FRAC(${value})"
        ],
        "description": ""
    },
    "FLOOR": {
        "prefix": "FLOOR(number)",
        "body": [
            "FLOOR(${number}})"
        ],
        "description": ""
    },
    "GCD": {
        "prefix": "GCD(value,value)",
        "body": [
            "GCD(${value},${value})"
        ],
        "description": ""
    },
    "INT": {
        "prefix": "INT(real_number)",
        "body": [
            "INT(${number})"
        ],
        "description": ""
    },
    "LOG": {
        "prefix": "LOG(value)",
        "body": [
            "LOG(${value})"
        ],
        "description": ""
    },
    "LGO2": {
        "prefix": "LOG2(value)",
        "body": [
            "LOG2(${value})"
        ],
        "description": ""
    },
    "LOG10": {
        "prefix": "LOG10(value)",
        "body": [
            "LOG10(${value})"
        ],
        "description": ""
    },
    "MAX": {
        "prefix": "MAX(value, value, value, …)",
        "body": [
            "MAX(${values})"
        ],
        "description": ""
    },
    "MIN": {
        "prefix": "MIN(value, value, value, …)",
        "body": [
            "MIN(${values})"
        ],
        "description": ""
    },
    "MOD": {
        "prefix": "MOD(dividend,divisor)",
        "body": [
            "MOD(${dividend},${divisor})"
        ],
        "description": ""
    },
    "MROUND": {
        "prefix": "MROUND(num,multiple)",
        "body": [
            "MROUND(${num},${multiple})"
        ],
        "description": ""
    },
    "POLY_TO_BINARY": {
        "prefix": "POLY_TO_BINARY(value,format[,length][,scale])",
        "body": [
            "POLY_TO_BINARY(${value},${format},${length},${scale}"
        ],
        "description": ""
    },
    "POLY_TO_BINARY_2": {
        "prefix": "POLY_TO_BINARY(value,format)",
        "body": [
            "POLY_TO_BINARY(${value},${format})"
        ],
        "description": ""
    },
    "RAD": {
        "prefix": "RAD(value)",
        "body": [
            "RAD(${value})"
        ],
        "description": ""
    },
    "RANDOM": {
        "prefix": "RANDOM(range)",
        "body": [
            "RANDOM(${range})"
        ],
        "description": ""
    },
    "ROUND": {
        "prefix": "ROUND(real_number,decimal_place)",
        "body": [
            "ROUND(${real_number},${decimal_place})"
        ],
        "description": ""
    },
    "SEC": {
        "prefix": "SEC(value)",
        "body": [
            "SEC(${value})"
        ],
        "description": ""
    },
    "SECD": {
        "prefix": "SECD(value)",
        "body": [
            "SECD(${secd})"
        ],
        "description": ""
    },
    "SECH": {
        "prefix": "SECH(value)",
        "body": [
            "SECH(${sech})"
        ],
        "description": ""
    },
    "SIGN": {
        "prefix": "SIGN(value)",
        "body": [
            "SIGN(${sign})"
        ],
        "description": ""
    },
    "SIN": {
        "prefix": "SIN(angle)",
        "body": [
            "SIN(${angle})"
        ],
        "description": ""
    },
    "SIND": {
        "prefix": "SIND(angle)",
        "body": [
            "SIND(${angle})"
        ],
        "description": ""
    },
    "SINH": {
        "prefix": "SINH(value)",
        "body": [
            "SINH(${value})"
        ],
        "description": ""
    },
    "SQRT": {
        "prefix": "SQRT(value)",
        "body": [
            "SQRT(${value})"
        ],
        "description": ""
    },
    "TAN": {
        "prefix": "TAN(angle)",
        "body": [
            "TAN(${value})"
        ],
        "description": ""
    },
    "TAND": {
        "prefix": "TAND(value)",
        "body": [
            "TAND(${value})"
        ],
        "description": ""
    },
    "TANH": {
        "prefix": "TANH(value)",
        "body": [
            "TANH(${value})"
        ],
        "description": ""
    },

// date and time functions

    "DATE": {
        "prefix": "DATE(days)",
        "body": [
            "DATE(${days})"
        ],
        "description": ""
    },
    "DATE_SECONDS": {
        "prefix": "DATE_SECONDS(seconds)",
        "body": [
            "DATE_SECONDS(${seconds})"
        ],
        "description": ""
    },
    "DATE_TIME": {
        "prefix": "DATE_TIME(source)",
        "body": [
            "DATE_TIME(${source})"
        ],
        "description": ""
    },
    "DAYS": {
        "prefix": "DAYS(source_date)",
        "body": [
            "DAYS(${source_date})"
        ],
        "description": ""
    },
    "DAY_OF_WEEK": {
        "prefix": "DAY_OF_WEEK(source_date)",
        "body": [
            "DAY_OF_WEEK(${source_date})"
        ],
        "description": ""
    },
    "DAYS_IN_MONTH": {
        "prefix": "DAYS_IN_MONTH(input-date)",
        "body": [
            "DAYS_IN_MONTH(${input-date})"
        ],
        "description": ""
    },
    "NEXT_MONTH": {
        "prefix": "NEXT_MONTH(input-date)",
        "body": [
            "NEXT_MONTH(${input-date})"
        ],
        "description": ""
    },
    "SECONDS": {
        "prefix": "SECONDS(source_date)",
        "body": [
            "SECONDS(${source_date})"
        ],
        "description": ""
    },


// Misc functions

    "ERROR_TEXT": {
        "prefix": "ERROR_TEXT(error_no,flags)",
        "body": [
            "ERROR_TEXT(${error_no},${flags})"
        ],
        "description": ""
    },
    "GET_SCV": {
        "prefix": "GET_SCV(svc_string)",
        "body": [
            "GET_SCV(${svc_string})"
        ],
        "description": ""
    },
    "IS_MARKED": {
        "prefix": "IS_MARKED([database_handle,]table_name)",
        "body": [
            "IS_MARKED(${table})"
        ],
        "description": ""
    },
    "IS_MARKED_ON_STREAM": {
        "prefix": "IS_MARKED_ON_STREAM(stream_name, table_name)",
        "body": [
            "IS_MARKED_ON_STREAM(${stream_name}, ${table_name})"
        ],
        "description": ""
    },
    "IS_NULL": {
        "prefix": "IS_NULL([database_handle.]\"table_name\",\"field_name\")",
        "body": [
            "IS_NULL(\"${table}\",\"${field}\")"
        ],
        "description": ""
    },
    "IS_NULL_ON_STREAM": {
        "prefix": "IS_NULL_ON_STREAM(\"stream_name\",\"table_name\",\"field_name\")",
        "body": [
            "IS_NULL_ON_STREAM(\"${stream}\",\"${table}\",\"${field}\")"
        ],
        "description": ""
    },
    "LTOTAL": {
        "prefix": "LTOTAL(break_no,total_column_number)",
        "body": [
            "LTOTAL(${break_no},${total_column_number})"
        ],
        "description": ""
    },
    "MASK": {
        "prefix": "MASK(mask_specification,source_string)",
        "body": [
            "MASK(${mask_specification},${source_string})"
        ],
        "description": ""
    },
    "MESSAGE_FUNCTION": {
        "prefix": "MESSAGE([database_handle.]message_name[,arg1[arg2[,…]]])",
        "body": [
            "MESSAGE(${msg_name}, ${arguments})"
        ],
        "description": ""
    },
    "PARAMETER": {
        "prefix": "PARAMETER([database_handle.]parameter_name[,source_date])",
        "body": [
            "PARAMETER(${parameter},${source_date})"
        ],
        "description": ""
    },
    "PARAMETER2": {
        "prefix": "PARAMETER(parameter_name)",
        "body": [
            "PARAMETER(${parameter})"
        ],
        "description": ""
    },

    "RECORD_ADDRESS": {
        "prefix": "RECORD_ADDRESS(table_spec)",
        "body": [
            "RECORD_ADDRESS(${table_spec})"
        ],
        "description": ""
    },
    "STREAM_DATA": {
        "prefix": "STREAM_DATA(stream_name,table_name,field_name)",
        "body": [
            "STREAM_DATA(${stream},${table},${field})"
        ],
        "description": ""
    },
    "TABLE_CHECK": {
        "prefix": "TABLE_CHECK([database_handle,]table_name,field_name)",
        "body": [
            "TABLE_CHECK(${table},${field})"
        ],
        "description": ""
    },
    "TABLE_DATA": {
        "prefix": "TABLE_DATA([database_handle,]table_name,field_name)",
        "body": [
            "TABLE_DATA(${table},${field})"
        ],
        "description": ""
    },
    "TOTAL": {
        "prefix": "TOTAL(total_number)",
        "body": [
            "TOTAL(${total_number})"
        ],
        "description": ""
    },

//

/*


RECORD_ADDRESS(table_spec)
STREAM_DATA(stream_name,table_name,field_name)
TABLE_CHECK([database_handle,]table_name,field_name)
TABLE_DATA([database_handle,]table_name,field_name)
TOTAL(total_number)
FILE MANIPULATION FUNCTIONS
status = DELETE_FILE(filename, default-filename)
FIND_FILE(file_spec[,default_spec)
#result=PARSE_FILENAME(filename, default-filename,
options)
[NO]FULL
[NO]NODE
[NO]DEVICE
[NO]DIRECTORY
[NO]NAME
[NO]TYPE
[NO]VERSION
[NO]CONCEAL
[NO]SYNTAX_ONLY
TEMPORARY_FILENAME(name-string)

*/
    

    
 // Special Vars

 
 
 
    "%ACCOUNT": {
        "prefix": "%ACCOUNT",
        "body": [
            "%ACCOUNT"
        ],
        "description": ""
    },
    "%ACTUAL_BREAK": {
        "prefix": "%ACTUAL_BREAK",
        "body": [
            "%ACTUAL_BREAK"
        ],
        "description": ""
    },
    "%ADD": {
        "prefix": "%ADD",
        "body": [
            "%ADD"
        ],
        "description": ""
    },
    "%ADVANCED_USER": {
        "prefix": "%ADVANCED_USER",
        "body": [
            "%ADVANCED_USER"
        ],
        "description": ""
    },
    "%ARCHIVE": {
        "prefix": "%ARCHIVE",
        "body": [
            "%ARCHIVE"
        ],
        "description": ""
    },
    "%BITMAP": {
        "prefix": "%BITMAP",
        "body": [
            "%BITMAP"
        ],
        "description": ""
    },
    "%BROADCAST": {
        "prefix": "%BROADCAST",
        "body": [
            "%BROADCAST"
        ],
        "description": ""
    },
    "%CAT_FILTER": {
        "prefix": "%CAT_FILTER",
        "body": [
            "%CAT_FILTER"
        ],
        "description": ""
    },
    "%CURRENT_BREAK": {
        "prefix": "%CURRENT_BREAK",
        "body": [
            "%CURRENT_BREAK"
        ],
        "description": ""
    },
    "%DATABASE": {
        "prefix": "%DATABASE",
        "body": [
            "%DATABASE"
        ],
        "description": ""
    },
    "%DEFAULT_ENGINE": {
        "prefix": "%DEFAULT_ENGINE",
        "body": [
            "%DEFAULT_ENGINE"
        ],
        "description": ""
    },
    "%DELETE": {
        "prefix": "%DELETE",
        "body": [
            "%DELETE"
        ],
        "description": ""
    },
    "%E": {
        "prefix": "%E",
        "body": [
            "%E"
        ],
        "description": ""
    },
    "%EDIT_MODE": {
        "prefix": "%EDIT_MODE",
        "body": [
            "%EDIT_MODE"
        ],
        "description": ""
    },
    "%ENTRY_MENU": {
        "prefix": "%ENTRY_MENU",
        "body": [
            "%ENTRY_MENU"
        ],
        "description": ""
    },
    "%EXIT_FORM_ACTIVE": {
        "prefix": "%EXIT_FORM_ACTIVE",
        "body": [
            "%EXIT_FORM_ACTIVE"
        ],
        "description": ""
    },
    "%EXIT_FORM_ENABLED": {
        "prefix": "%EXIT_FORM_ENABLED",
        "body": [
            "%EXIT_FORM_ENABLED"
        ],
        "description": ""
    },
    "%EXIT_FORM_FILENAME": {
        "prefix": "%EXIT_FORM_FILENAME",
        "body": [
            "%EXIT_FORM_FILENAME"
        ],
        "description": ""
    },
    "%EXIT_FORM_FORMNAME": {
        "prefix": "%EXIT_FORM_FORMNAME",
        "body": [
            "%EXIT_FORM_FORMNAME"
        ],
        "description": ""
    },
    "%EXIT_FORWARD": {
        "prefix": "%EXIT_FORWARD",
        "body": [
            "%EXIT_FORWARD"
        ],
        "description": ""
    },
    "%FACILITY": {
        "prefix": "%FACILITY",
        "body": [
            "%FACILITY"
        ],
        "description": ""
    },
    "%FACILITY_DATABASE": {
        "prefix": "%FACILITY_DATABASE",
        "body": [
            "%FACILITY_DATABASE"
        ],
        "description": ""
    },
    "%FACILITY_NAME": {
        "prefix": "%FACILITY_NAME",
        "body": [
            "%FACILITY_NAME"
        ],
        "description": ""
    },
    "%FACILITY_SYSTEM": {
        "prefix": "%FACILITY_SYSTEM",
        "body": [
            "%FACILITY_SYSTEM"
        ],
        "description": ""
    },
    "%FIND": {
        "prefix": "%FIND",
        "body": [
            "%FIND"
        ],
        "description": ""
    },
    "%FORM_FILE": {
        "prefix": "%FORM_FILE",
        "body": [
            "%FORM_FILE"
        ],
        "description": ""
    },
    "%FORM_NAME": {
        "prefix": "%FORM_NAME",
        "body": [
            "%FORM_NAME"
        ],
        "description": ""
    },
    "%GEM_INIT": {
        "prefix": "%GEM_INIT",
        "body": [
            "%GEM_INIT"
        ],
        "description": ""
    },
    "%GTID": {
        "prefix": "%GTID",
        "body": [
            "%GTID"
        ],
        "description": ""
    },
    "%GTID_LEVEL": {
        "prefix": "%GTID_LEVEL",
        "body": [
            "%GTID_LEVEL"
        ],
        "description": ""
    },
    "%HARDWARE": {
        "prefix": "%HARDWARE",
        "body": [
            "%HARDWARE"
        ],
        "description": ""
    },
    "%HELP_LIBRARY": {
        "prefix": "%HELP_LIBRARY",
        "body": [
            "%HELP_LIBRARY"
        ],
        "description": ""
    },
    "%HOSTID": {
        "prefix": "%HOSTID",
        "body": [
            "%HOSTID"
        ],
        "description": ""
    },
    "%INPUT_BACKGROUND": {
        "prefix": "%INPUT_BACKGROUND",
        "body": [
            "%INPUT_BACKGROUND"
        ],
        "description": ""
    },
    "%INPUT_DATE_FORMAT": {
        "prefix": "%INPUT_DATE_FORMAT",
        "body": [
            "%INPUT_DATE_FORMAT"
        ],
        "description": ""
    },
    "%INPUT_FORGROUND": {
        "prefix": "%INPUT_FORGROUND",
        "body": [
            "%INPUT_FORGROUND"
        ],
        "description": ""
    },
    "%INPUT_PROMPT": {
        "prefix": "%INPUT_PROMPT",
        "body": [
            "%INPUT_PROMPT"
        ],
        "description": ""
    },
    "%INPUT_TIMEOUT": {
        "prefix": "%INPUT_TIMEOUT",
        "body": [
            "%INPUT_TIMEOUT"
        ],
        "description": ""
    },
    "%INPUT_UPDATE": {
        "prefix": "%INPUT_UPDATE",
        "body": [
            "%INPUT_UPDATE"
        ],
        "description": ""
    },
    "%INTERRUPT": {
        "prefix": "%INTERRUPT",
        "body": [
            "%INTERRUPT"
        ],
        "description": ""
    },
    "%INTERRUPT_COMMAND": {
        "prefix": "%INTERRUPT_COMMAND",
        "body": [
            "%INTERRUPT_COMMAND"
        ],
        "description": ""
    },
    "%IS_ADMIN": {
        "prefix": "%IS_ADMIN",
        "body": [
            "%IS_ADMIN"
        ],
        "description": ""
    },
    "%KEYBOARD_FILE": {
        "prefix": "%KEYBOARD_FILE",
        "body": [
            "%KEYBOARD_FILE"
        ],
        "description": ""
    },
    "%LANGUAGE": {
        "prefix": "%LANGUAGE",
        "body": [
            "%LANGUAGE"
        ],
        "description": ""
    },
    "%LOCK_OPTIONS": {
        "prefix": "%LOCK_OPTIONS",
        "body": [
            "%LOCK_OPTIONS"
        ],
        "description": ""
    },
    "%MASK_CURRENCY_SIGN": {
        "prefix": "%MASK_CURRENCY_SIGN",
        "body": [
            "%MASK_CURRENCY_SIGN"
        ],
        "description": ""
    },
    "%MASK_DIGIT_SEPARATOR": {
        "prefix": "%MASK_DIGIT_SEPARATOR",
        "body": [
            "%MASK_DIGIT_SEPARATOR"
        ],
        "description": ""
    },
    "%MASK_RADIX_POINT": {
        "prefix": "%MASK_RADIX_POINT",
        "body": [
            "%MASK_RADIX_POINT"
        ],
        "description": ""
    },
    "%MODE": {
        "prefix": "%MODE",
        "body": [
            "%MODE"
        ],
        "description": ""
    },
    "%MODIFY": {
        "prefix": "%MODIFY",
        "body": [
            "%MODIFY"
        ],
        "description": ""
    },
    "%NODENAME": {
        "prefix": "%NODENAME",
        "body": [
            "%NODENAME"
        ],
        "description": ""
    },
    "%NOW": {
        "prefix": "%NOW",
        "body": [
            "%NOW"
        ],
        "description": ""
    },
    "%OPERATING_SYSTEM": {
        "prefix": "%OPERATING_SYSTEM",
        "body": [
            "%OPERATING_SYSTEM"
        ],
        "description": ""
    },
    "%PAGE": {
        "prefix": "%PAGE",
        "body": [
            "%PAGE"
        ],
        "description": ""
    },
    "%PERFORM": {
        "prefix": "%PERFORM",
        "body": [
            "%PERFORM"
        ],
        "description": ""
    },
    "%PI": {
        "prefix": "%PI",
        "body": [
            "%PI"
        ],
        "description": ""
    },
    "%PID": {
        "prefix": "%PID",
        "body": [
            "%PID"
        ],
        "description": ""
    },
    "%PLATFORM": {
        "prefix": "%PLATFORM",
        "body": [
            "%PLATFORM"
        ],
        "description": ""
    },
    "%PERCISION": {
        "prefix": "%PERCISION",
        "body": [
            "%PERCISION"
        ],
        "description": ""
    },
    "%PRINT_MODE": {
        "prefix": "%PRINT_MODE",
        "body": [
            "%PRINT_MODE"
        ],
        "description": ""
    },
    "%QUERY_CUR_REC": {
        "prefix": "%QUERY_CUR_REC",
        "body": [
            "%QUERY_CUR_REC"
        ],
        "description": ""
    },
    "%QUERY_MAX_REC": {
        "prefix": "%QUERY_MAX_REC",
        "body": [
            "%QUERY_MAX_REC"
        ],
        "description": ""
    },
    "%QUERY_MODE": {
        "prefix": "%QUERY_MODE",
        "body": [
            "%QUERY_MODE"
        ],
        "description": ""
    },
    "%REPORT_DATE": {
        "prefix": "%REPORT_DATE",
        "body": [
            "%REPORT_DATE"
        ],
        "description": ""
    },
    "%REPORT_FORM_FEEDS": {
        "prefix": "%REPORT_FORM_FEEDS",
        "body": [
            "%REPORT_FORM_FEEDS"
        ],
        "description": ""
    },
    "%REPORT_PAGE_SIZE": {
        "prefix": "%REPORT_PAGE_SIZE",
        "body": [
            "%REPORT_PAGE_SIZE"
        ],
        "description": ""
    },
    "%REPORT_MODE": {
        "prefix": "%REPORT_MODE",
        "body": [
            "%REPORT_MODE"
        ],
        "description": ""
    },
    "%REPORT_NAME": {
        "prefix": "%REPORT_NAME",
        "body": [
            "%REPORT_NAME"
        ],
        "description": ""
    },
    "%ROW_NUMBER": {
        "prefix": "%ROW_NUMBER",
        "body": [
            "%ROW_NUMBER"
        ],
        "description": ""
    },
    "%SCREEN_MODE": {
        "prefix": "%SCREEN_MODE",
        "body": [
            "%SCREEN_MODE"
        ],
        "description": ""
    },
    "%SCREEN_WIDTH": {
        "prefix": "%SCREEN_WIDTH",
        "body": [
            "%SCREEN_WIDTH"
        ],
        "description": ""
    },
    "%SERVER": {
        "prefix": "%SERVER",
        "body": [
            "%SERVER"
        ],
        "description": ""
    },
    "%SHADOW_LEVEL": {
        "prefix": "%SHADOW_LEVEL",
        "body": [
            "%SHADOW_LEVEL"
        ],
        "description": ""
    },
    "%SIGNATURE_ID": {
        "prefix": "%SIGNATURE_ID",
        "body": [
            "%SIGNATURE_ID"
        ],
        "description": ""
    },
    "%STATUS": {
        "prefix": "%STATUS",
        "body": [
            "%STATUS"
        ],
        "description": ""
    },
    "%STATUS_FREQUENCY": {
        "prefix": "%STATUS_FREQUENCY",
        "body": [
            "%STATUS_FREQUENCY"
        ],
        "description": ""
    },
    "%SYSTEM": {
        "prefix": "%SYSTEM",
        "body": [
            "%SYSTEM"
        ],
        "description": ""
    },
    "%TARGETID": {
        "prefix": "%TARGETID",
        "body": [
            "%TARGETID"
        ],
        "description": ""
    },
    "%TEMPORARY_DIRECTORY": {
        "prefix": "%TEMPORARY_DIRECTORY",
        "body": [
            "%TEMPORARY_DIRECTORY"
        ],
        "description": ""
    },
    "%TERMINAL": {
        "prefix": "%TERMINAL",
        "body": [
            "%TERMINAL"
        ],
        "description": ""
    },
    "%TEXTFILE_MODE": {
        "prefix": "%TEXTFILE_MODE",
        "body": [
            "%TEXTFILE_MODE"
        ],
        "description": ""
    },
    "%THIN_CLIENT": {
        "prefix": "%THIN_CLIENT",
        "body": [
            "%THIN_CLIENT"
        ],
        "description": ""
    },
    "%THIN_CLIENT_CHARSET": {
        "prefix": "%THIN_CLIENT_CHARSET",
        "body": [
            "%THIN_CLIENT_CHARSET"
        ],
        "description": ""
    },
    "%THIN_CLIENT_HW": {
        "prefix": "%THIN_CLIENT_HW",
        "body": [
            "%THIN_CLIENT_HW"
        ],
        "description": ""
    },
    "%THIN_CLIENT_IPCNAME": {
        "prefix": "%THIN_CLIENT_IPCNAME",
        "body": [
            "%THIN_CLIENT_IPCNAME"
        ],
        "description": ""
    },
    "%THIN_CLIENT_MODE": {
        "prefix": "%THIN_CLIENT_MODE",
        "body": [
            "%THIN_CLIENT_MODE"
        ],
        "description": ""
    },
    "%THIN_CLIENT_OS": {
        "prefix": "%THIN_CLIENT_OS",
        "body": [
            "%THIN_CLIENT_OS"
        ],
        "description": ""
    },
    "%THIN_CLIENT_REPORT_DIR": {
        "prefix": "%THIN_CLIENT_REPORT_DIR",
        "body": [
            "%THIN_CLIENT_REPORT_DIR"
        ],
        "description": ""
    },
    "%THIN_CLIENT_TYPE": {
        "prefix": "%THIN_CLIENT_TYPE",
        "body": [
            "%THIN_CLIENT_TYPE"
        ],
        "description": ""
    },
    "%THIN_CLIENT_USERNAME": {
        "prefix": "%THIN_CLIENT_USERNAME",
        "body": [
            "%THIN_CLIENT_USERNAME"
        ],
        "description": ""
    },
    "%THIN_SERVER": {
        "prefix": "%THIN_SERVER",
        "body": [
            "%THIN_SERVER"
        ],
        "description": ""
    },
    "%THIN_SERVER_CHARSET": {
        "prefix": "%THIN_SERVER_CHARSET",
        "body": [
            "%THIN_SERVER_CHARSET"
        ],
        "description": ""
    },
    "%THIN_SERVER_DBCHARSET": {
        "prefix": "%THIN_SERVER_DBCHARSET",
        "body": [
            "%THIN_SERVER_DBCHARSET"
        ],
        "description": ""
    },
    "%THIN_SERVER_HW": {
        "prefix": "%THIN_SERVER_HW",
        "body": [
            "%THIN_SERVER_HW"
        ],
        "description": ""
    },
    "%THIN_SERVER_IPCNAME": {
        "prefix": "%THIN_SERVER_IPCNAME",
        "body": [
            "%THIN_SERVER_IPCNAME"
        ],
        "description": ""
    },
    "%THIN_SERVER_MODE": {
        "prefix": "%THIN_SERVER_MODE",
        "body": [
            "%THIN_SERVER_MODE"
        ],
        "description": ""
    },
    "%THIN_ SERVER_OS": {
        "prefix": "%THIN_ SERVER_OS",
        "body": [
            "%THIN_ SERVER_OS"
        ],
        "description": ""
    },
    "%THIN_SERVER_REPORT_DIR": {
        "prefix": "%THIN_SERVER_REPORT_DIR",
        "body": [
            "%THIN_SERVER_REPORT_DIR"
        ],
        "description": ""
    },
    "%THIN_SERVER_USERNAME": {
        "prefix": "%THIN_SERVER_USERNAME",
        "body": [
            "%THIN_SERVER_USERNAME"
        ],
        "description": ""
    },
    "%TITLE_FORM": {
        "prefix": "%TITLE_FORM",
        "body": [
            "%TITLE_FORM"
        ],
        "description": ""
    },
    "%TODAY": {
        "prefix": "%TODAY",
        "body": [
            "%TODAY"
        ],
        "description": ""
    },
    "%TRANS_LEVEL": {
        "prefix": "%TRANS_LEVEL",
        "body": [
            "%TRANS_LEVEL"
        ],
        "description": ""
    },
    "%UIC": {
        "prefix": "%UIC",
        "body": [
            "%UIC"
        ],
        "description": ""
    },
    "%UIC_GRP": {
        "prefix": "%UIC_GRP",
        "body": [
            "%UIC_GRP"
        ],
        "description": ""
    },
    "%UIC_MEM": {
        "prefix": "%UIC_MEM",
        "body": [
            "%UIC_MEM"
        ],
        "description": ""
    },
    "%UNIX": {
        "prefix": "%UNIX",
        "body": [
            "%UNIX"
        ],
        "description": ""
    },
    "%USERNAME": {
        "prefix": "%USERNAME",
        "body": [
            "%USERNAME"
        ],
        "description": ""
    },
    "%VERSION": {
        "prefix": "%VERSION",
        "body": [
            "%VERSION"
        ],
        "description": ""
    },
    "%WD": {
        "prefix": "%WD",
        "body": [
            "%WD"
        ],
        "description": ""
    },
    "%XPID": {
        "prefix": "%XPID",
        "body": [
            "%XPID"
        ],
        "description": ""
    },
    "VALUE SYMBOLS": {
        "prefix": "VALUE SYMBOLS",
        "body": [
            "VALUE SYMBOLS"
        ],
        "description": ""
    },
    "%BACK": {
        "prefix": "%BACK",
        "body": [
            "%BACK"
        ],
        "description": ""
    },
    "%DATA": {
        "prefix": "%DATA",
        "body": [
            "%DATA"
        ],
        "description": ""
    },
    "%DEADLOCK": {
        "prefix": "%DEADLOCK",
        "body": [
            "%DEADLOCK"
        ],
        "description": ""
    },
    "%EMPTY": {
        "prefix": "%EMPTY",
        "body": [
            "%EMPTY"
        ],
        "description": ""
    },
    "%EXIT": {
        "prefix": "%EXIT",
        "body": [
            "%EXIT"
        ],
        "description": ""
    },
    "FAILURE": {
        "prefix": "\\%FAILURE",
        "body": [
            "%FAILURE"
        ],
        "description": "failure"
    },
    "%NORMAL": {
        "prefix": "%NORMAL",
        "body": [
            "%NORMAL"
        ],
        "description": ""
    },
    "%SUCCESS": {
        "prefix": "%SUCCESS",
        "body": [
            "%SUCCESS"
        ],
        "description": ""
    },
    "SECURITY VALUE SYMBOLS": {
        "prefix": "SECURITY VALUE SYMBOLS",
        "body": [
            "SECURITY VALUE SYMBOLS"
        ],
        "description": ""
    },
    "%ADMIN_ACCESS": {
        "prefix": "%ADMIN_ACCESS",
        "body": [
            "%ADMIN_ACCESS"
        ],
        "description": ""
    },
    "%CHANGE_ACCESS": {
        "prefix": "%CHANGE_ACCESS",
        "body": [
            "%CHANGE_ACCESS"
        ],
        "description": ""
    },
    "%CONTROL_ACCESS": {
        "prefix": "%CONTROL_ACCESS",
        "body": [
            "%CONTROL_ACCESS"
        ],
        "description": ""
    },
    "%DEFINE_ACCESS": {
        "prefix": "%DEFINE_ACCESS",
        "body": [
            "%DEFINE_ACCESS"
        ],
        "description": ""
    },
    "%DELETE_ACCESS": {
        "prefix": "%DELETE_ACCESS",
        "body": [
            "%DELETE_ACCESS"
        ],
        "description": ""
    },
    "%ERASE_ACCESS": {
        "prefix": "%ERASE_ACCESS",
        "body": [
            "%ERASE_ACCESS"
        ],
        "description": ""
    },
    "%MODIFY_ACCESS": {
        "prefix": "%MODIFY_ACCESS",
        "body": [
            "%MODIFY_ACCESS"
        ],
        "description": ""
    },
    "%OPERATOR_ACCESS": {
        "prefix": "%OPERATOR_ACCESS",
        "body": [
            "%OPERATOR_ACCESS"
        ],
        "description": ""
    },
    "%READ_ACCESS": {
        "prefix": "%READ_ACCESS",
        "body": [
            "%READ_ACCESS"
        ],
        "description": ""
    },
    "%SHOW_ACCESS": {
        "prefix": "%SHOW_ACCESS",
        "body": [
            "%SHOW_ACCESS"
        ],
        "description": ""
    }
    
}